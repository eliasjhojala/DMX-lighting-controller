!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CMYK_Colour	Wash.pde	/^  CMYK_Colour(color c) {$/;"	m	class:CMYK_Colour
CMYK_Colour	Wash.pde	/^class CMYK_Colour {$/;"	c
CONTROLLED	settings.pde	/^  String CONTROLLED;$/;"	f	class:StringSettingController
Color	Wash.pde	/^  Color(int r, int g, int b) {$/;"	m	class:Color
Color	Wash.pde	/^  Color(int r, int g, int b, int w) {$/;"	m	class:Color
Color	Wash.pde	/^class Color {$/;"	c
ControlFrame	cp5.pde	/^  private ControlFrame() {$/;"	m	class:ControlFrame	file:
ControlFrame	cp5.pde	/^  public ControlFrame(Object theParent, int theWidth, int theHeight) {$/;"	m	class:ControlFrame
ControlFrame	cp5.pde	/^public class ControlFrame extends PApplet {$/;"	c
CursorHandler	GUI.pde	/^  CursorHandler() {$/;"	m	class:CursorHandler
CursorHandler	GUI.pde	/^class CursorHandler {$/;"	c
DMX	DMX_proc.pde	/^int[] DMX = new int[DMX_CHAN_LENGTH+1];$/;"	typedefs
DMX	fixtureDMX.pde	/^  int[] DMX = new int[DMXlength];$/;"	f	class:FixtureDMX
DMXChanged	fixture.pde	/^  boolean DMXChanged = false;$/;"	f	class:fixture
DMXChanged	fixtureDMX.pde	/^  boolean DMXChanged;$/;"	f	class:FixtureDMX
DMX_AMBER	fixtureDMX.pde	/^final int DMX_AMBER = 6;$/;"	typedefs
DMX_AUTOPROGRAMS	fixtureDMX.pde	/^final int DMX_AUTOPROGRAMS = 20;$/;"	typedefs
DMX_BLUE	fixtureDMX.pde	/^final int DMX_BLUE = 4;$/;"	typedefs
DMX_CHAN_LENGTH	DMX_proc.pde	/^final int DMX_CHAN_LENGTH = 512;$/;"	typedefs
DMX_COLORWHEEL	fixtureDMX.pde	/^final int DMX_COLORWHEEL = 11;$/;"	typedefs
DMX_DIMMER	fixtureDMX.pde	/^final int DMX_DIMMER = 1;$/;"	typedefs
DMX_FAN	fixtureDMX.pde	/^final int DMX_FAN = 23;$/;"	typedefs
DMX_FOCUS	fixtureDMX.pde	/^final int DMX_FOCUS = 15;$/;"	typedefs
DMX_FOG	fixtureDMX.pde	/^final int DMX_FOG = 24;$/;"	typedefs
DMX_FREQUENCY	fixtureDMX.pde	/^final int DMX_FREQUENCY = 18;$/;"	typedefs
DMX_GOBOROTATION	fixtureDMX.pde	/^final int DMX_GOBOROTATION = 13;$/;"	typedefs
DMX_GOBOWHEEL	fixtureDMX.pde	/^final int DMX_GOBOWHEEL = 12;$/;"	typedefs
DMX_GREEN	fixtureDMX.pde	/^final int DMX_GREEN = 3;$/;"	typedefs
DMX_HAZE	fixtureDMX.pde	/^final int DMX_HAZE = 22;$/;"	typedefs
DMX_PAN	fixtureDMX.pde	/^final int DMX_PAN = 7;$/;"	typedefs
DMX_PANFINE	fixtureDMX.pde	/^final int DMX_PANFINE = 9;$/;"	typedefs
DMX_PRISM	fixtureDMX.pde	/^final int DMX_PRISM = 14;$/;"	typedefs
DMX_RED	fixtureDMX.pde	/^final int DMX_RED = 2;$/;"	typedefs
DMX_RESPONSESPEED	fixtureDMX.pde	/^final int DMX_RESPONSESPEED = 19;$/;"	typedefs
DMX_SHUTTER	fixtureDMX.pde	/^final int DMX_SHUTTER = 16;$/;"	typedefs
DMX_SPECIAL1	fixtureDMX.pde	/^final int DMX_SPECIAL1 = 25;$/;"	typedefs
DMX_SPECIAL2	fixtureDMX.pde	/^final int DMX_SPECIAL2 = 26;$/;"	typedefs
DMX_SPECIAL3	fixtureDMX.pde	/^final int DMX_SPECIAL3 = 27;$/;"	typedefs
DMX_SPECIAL4	fixtureDMX.pde	/^final int DMX_SPECIAL4 = 28;$/;"	typedefs
DMX_SPECIALFUNCTIONS	fixtureDMX.pde	/^final int DMX_SPECIALFUNCTIONS = 21;$/;"	typedefs
DMX_STROBE	fixtureDMX.pde	/^final int DMX_STROBE = 17;$/;"	typedefs
DMX_TILT	fixtureDMX.pde	/^final int DMX_TILT = 8;$/;"	typedefs
DMX_TILTFINE	fixtureDMX.pde	/^final int DMX_TILTFINE = 10;$/;"	typedefs
DMX_WHITE	fixtureDMX.pde	/^final int DMX_WHITE = 5;$/;"	typedefs
DMXforCrossFixtureOld	DMX_proc.pde	/^int[] DMXforCrossFixtureOld = new int[DMX_CHAN_LENGTH+1];$/;"	typedefs
DMXforOutput	DMX_proc.pde	/^int[] DMXforOutput = new int[DMX_CHAN_LENGTH+1];$/;"	typedefs
DMXlength	fixtureDMX.pde	/^  int DMXlength = universalDMXlength;$/;"	f	class:FixtureDMX
DMXold	fixtureDMX.pde	/^  int[] DMXold = new int[DMXlength];$/;"	f	class:FixtureDMX
Fade	fade.pde	/^  Fade(int from, int to) {$/;"	m	class:Fade
Fade	fade.pde	/^  Fade(int from, int to, int pre, int post) {$/;"	m	class:Fade
Fade	fade.pde	/^class Fade { $/;"	c
FixtureArray	fixture.pde	/^  FixtureArray() {$/;"	m	class:FixtureArray
FixtureArray	fixture.pde	/^class FixtureArray {$/;"	c
FixtureDMX	fixtureDMX.pde	/^  FixtureDMX() {$/;"	m	class:FixtureDMX
FixtureDMX	fixtureDMX.pde	/^  FixtureDMX(fixture parent) {$/;"	m	class:FixtureDMX
FixtureDMX	fixtureDMX.pde	/^class FixtureDMX { \/\/Class containig all the dmx values$/;"	c
FixtureProfile	profiles.pde	/^   FixtureProfile(String fN, String[] cN, int[] cT) {$/;"	m	class:FixtureProfile
FixtureProfile	profiles.pde	/^  FixtureProfile(String fN, String[] cN, int[] cT, fixtureSize s) {$/;"	m	class:FixtureProfile
FixtureProfile	profiles.pde	/^class FixtureProfile {$/;"	c
HSBColorPicker	colPicker.pde	/^  HSBColorPicker() {$/;"	m	class:HSBColorPicker
HSBColorPicker	colPicker.pde	/^class HSBColorPicker { $/;"	c
HoverableElement	hover.pde	/^  HoverableElement(String N, int P, int X1, int Y1, int X2, int Y2) {$/;"	m	class:HoverableElement
HoverableElement	hover.pde	/^class HoverableElement {$/;"	c
IntSettingController	settings.pde	/^  IntSettingController(int mode, int state, int x_offs, int y_offs, SettingController parent) {$/;"	m	class:IntSettingController
IntSettingController	settings.pde	/^class IntSettingController {$/;"	c
LowerMenu	Lmenu.pde	/^  LowerMenu() {$/;"	m	class:LowerMenu
LowerMenu	Lmenu.pde	/^class LowerMenu {$/;"	c
MATinterval	midi.pde	/^int MATinterval;$/;"	typedefs
MATlastStepMillis	midi.pde	/^int MATlastStepMillis;$/;"	typedefs
Maschine	DMX_Controller.pde	/^MidiBus Maschine;$/;"	typedefs
MemoryCreationBox	Rmenu.pde	/^  MemoryCreationBox(boolean o) {$/;"	m	class:MemoryCreationBox
MemoryCreationBox	Rmenu.pde	/^class MemoryCreationBox {$/;"	c
Mouse	hover.pde	/^  Mouse() {$/;"	m	class:Mouse
Mouse	hover.pde	/^  Mouse(Mouse parent, String nameInParent, String onTopOf, int x_off, int y_off, int w, int h) {$/;"	m	class:Mouse
Mouse	hover.pde	/^  Mouse(Mouse parent, String nameInParent, int priority, int x_off, int y_off, int w, int h) {$/;"	m	class:Mouse
Mouse	hover.pde	/^class Mouse {$/;"	c
Notifier	Lmenu.pde	/^  Notifier() {$/;"	m	class:Notifier
Notifier	Lmenu.pde	/^class Notifier {$/;"	c
PFrame	f3D.pde	/^  public PFrame() {$/;"	m	class:PFrame
PFrame	f3D.pde	/^public class PFrame extends JFrame {$/;"	c
PFrame1	f3D.pde	/^  public PFrame1(PApplet parent) {$/;"	m	class:PFrame1
PFrame1	f3D.pde	/^public class PFrame1 extends JFrame {$/;"	c
Remote	DMX_Controller.pde	/^NetAddress Remote;                                          \/\/|$/;"	typedefs
SettingController	settings.pde	/^  SettingController(String CONTROLLED_OBJECT, String name, String description, SettingsTab parent) {$/;"	m	class:SettingController
SettingController	settings.pde	/^  SettingController(int var, String name, String description, SettingsTab parent) {$/;"	m	class:SettingController
SettingController	settings.pde	/^  SettingController(int var, int type, int defVal, String name, String description, SettingsTab parent) {$/;"	m	class:SettingController
SettingController	settings.pde	/^class SettingController {$/;"	c
SettingsTab	settings.pde	/^  SettingsTab(String text, SettingsWindow parent) {$/;"	m	class:SettingsTab
SettingsTab	settings.pde	/^  SettingsTab(String text, int hght, SettingsWindow parent) {$/;"	m	class:SettingsTab
SettingsTab	settings.pde	/^class SettingsTab {$/;"	c
SettingsWindow	settings.pde	/^  SettingsWindow() {$/;"	m	class:SettingsWindow
SettingsWindow	settings.pde	/^  SettingsWindow(boolean open) {$/;"	m	class:SettingsWindow
SettingsWindow	settings.pde	/^class SettingsWindow {$/;"	c
StringSettingController	settings.pde	/^  StringSettingController(String CONTROLLED, int x_offs, int y_offs, SettingController parent) {$/;"	m	class:StringSettingController
StringSettingController	settings.pde	/^class StringSettingController {$/;"	c
SubWindowContainer	GUI.pde	/^  SubWindowContainer(java.lang.Object window, String mouseName, int mousePriority) {$/;"	m	class:SubWindowContainer
SubWindowContainer	GUI.pde	/^class SubWindowContainer {$/;"	c
SubWindowHandler	GUI.pde	/^  SubWindowHandler() {$/;"	m	class:SubWindowHandler
SubWindowHandler	GUI.pde	/^class SubWindowHandler {$/;"	c
Switch	GUI.pde	/^  Switch(boolean state, String captureName, String ontopofName, int locX, int locY) {$/;"	m	class:Switch
Switch	GUI.pde	/^  Switch(boolean state, color bg, color fg, String captureName, String ontopofName, int locX, int locY) {$/;"	m	class:Switch
Switch	GUI.pde	/^  Switch(int locX, int locY) {$/;"	m	class:Switch
Switch	GUI.pde	/^class Switch {$/;"	c
Trigwave	cp5.pde	/^  boolean Trigwave = false;$/;"	f	class:ControlFrame
aCreatePreset	cp5.pde	/^  void aCreatePreset() {$/;"	m	class:ControlFrame
aDeleteAllPresets	cp5.pde	/^  void aDeleteAllPresets() {$/;"	m	class:ControlFrame
aHeight	cp5.pde	/^        int aHeight = 100;$/;"	f	class:ControlFrame
aWidth	cp5.pde	/^        int aWidth = 14;$/;"	f	class:ControlFrame
aXoffset	cp5.pde	/^        int aXoffset = 10;$/;"	f	class:ControlFrame
aY	cp5.pde	/^        int aY = 30;$/;"	f	class:ControlFrame
accuracy	Wash.pde	/^  int accuracy = 5;$/;"	f	class:colorWash
action	GUI.pde	/^  Method action;$/;"	f	class:contextMenuOption
actualSketchPath	DMX_Controller.pde	/^String actualSketchPath;$/;"	typedefs
actualValue	fade.pde	/^  int originalValue, targetValue, actualValue;$/;"	f	class:Fade
add	fixture.pde	/^  void add(fixture newFix) {$/;"	m	class:FixtureArray
addButtonsForNewPresets	cp5.pde	/^  void addButtonsForNewPresets() {$/;"	m	class:ControlFrame
addControlFrame	cp5.pde	/^ControlFrame addControlFrame(String theName, int theWidth, int theHeight) {$/;"	m
addToSelectedMemoryMode	Rmenu.pde	/^  void addToSelectedMemoryMode() {$/;"	m	class:MemoryCreationBox
addr	inOSC.pde	/^String addr = "";$/;"	typedefs
alavalikko	Lmenu.pde	/^void alavalikko() {$/;"	m
allChannels	DMX_Controller.pde	/^int[][] allChannels = new int[6][48];                                                                      \/\/|||$/;"	typedefs
allChannelsOld	DMX_Controller.pde	/^int[][] allChannelsOld = new int[6][48];                                                                   \/\/|||$/;"	typedefs
animationState	GUI.pde	/^  int animationState = 0;$/;"	f	class:Switch
ansaTaka	DMX_Controller.pde	/^int ansaTaka = 32;$/;"	typedefs
ansaType	f3D.pde	/^int[] ansaType = new int[numberOfAnsas];$/;"	typedefs
ansaWidth	functions.pde	/^int ansaWidth;$/;"	typedefs
ansaX	f3D.pde	/^int[] ansaX = new int[numberOfAnsas];$/;"	typedefs
ansaY	f3D.pde	/^int[] ansaY = new int[numberOfAnsas];$/;"	typedefs
ansaZ	f3D.pde	/^int[] ansaZ = new int[numberOfAnsas];$/;"	typedefs
ansat	functions.pde	/^void ansat(PVector mouseRotated) {$/;"	m
arduinoBaud	DMX_Controller.pde	/^int arduinoBaud = 115200; \/\/Arduinon baudRate (serial.begin(115200);                                                                                                      \/\/|$/;"	typedefs
arduinoBaud2	DMX_Controller.pde	/^int arduinoBaud2 = 9600;                                                                                                                                                  \/\/|$/;"	typedefs
arduinoIndex	DMX_Controller.pde	/^int arduinoIndex = 0; \/\/Arduinon COM-portin järjestysnumero                                                                                                               \/\/|$/;"	typedefs
arduinoIndex2	DMX_Controller.pde	/^int arduinoIndex2 = 10;                                                                                                                                                   \/\/|$/;"	typedefs
arduinoPort2	DMX_Controller.pde	/^Serial arduinoPort2;$/;"	typedefs
arduinoSend	functions.pde	/^void arduinoSend() {$/;"	m
array	fixture.pde	/^  ArrayList<fixture> array;$/;"	f	class:FixtureArray
assetPath	f3D.pde	/^String assetPath;$/;"	typedefs
assignedData	Lmenu.pde	/^  int assignedData; \/\/Datatype assigned to this slider$/;"	f	class:bottomMenuChController
autoCapture	hover.pde	/^  boolean autoCapture = true;    \/\/Is element automatically captured during refresh if it is selected or can an external source decide whether it should capture?$/;"	f	class:HoverableElement
avg	memory.pde	/^  float[] avg = new float[getFreqMax()];$/;"	f	class:soundDetect
avgCounter	memory.pde	/^  float[] avgCounter = new float[getFreqMax()];$/;"	f	class:soundDetect
avgFrameRate	Umenu.pde	/^int avgFrameRate = 0;$/;"	typedefs
avgTemp	memory.pde	/^  float[] avgTemp = new float[getFreqMax()];$/;"	f	class:soundDetect
bands	memory.pde	/^  float[] bands;$/;"	f	class:soundDetect
base	f3D.pde	/^PShape base;$/;"	f	class:secondApplet1
beat	DMX_Controller.pde	/^BeatDetect beat;                                                                \/\/|$/;"	typedefs
beat	memory.pde	/^  boolean beat(int bT) {$/;"	m	class:soundDetect
beatMode	memory.pde	/^  String beatMode = new String(); \/\/kick, snare or hat$/;"	f	class:chase
beatModeDown	memory.pde	/^        void beatModeDown() {                                                                  $/;"	m	class:chase
beatModeId	memory.pde	/^  int inputMode, outputMode, beatModeId; \/\/What is input and what will output look like$/;"	f	class:chase
beatModeLimit	memory.pde	/^  int[] beatModeLimit = { 2, 4 };$/;"	f	class:chase
beatModeLimit	memory.pde	/^  int[] beatModeLimit = { 2, 4 };$/;"	typedefs
beatModeMaster	memory.pde	/^  int beatModeMaster = beatModeLimit[0];$/;"	typedefs
beatModeUp	memory.pde	/^        void beatModeUp() {                                                                    $/;"	m	class:chase
beatToLight	memory.pde	/^  void beatToLight() { \/\/This function turns all the lights in chase on if there is beat, else it turns all the lights off$/;"	m	class:chase
beatToLightValue	memory.pde	/^  int beatToLightValue;$/;"	f	class:chase
beatToMoving	memory.pde	/^  void beatToMoving() {$/;"	m	class:chase
bg	GUI.pde	/^  color bg, fg;$/;"	f	class:Switch
black	Wash.pde	/^  float cyan, magenta, yellow, black;$/;"	f	class:CMYK_Colour
blackOut	functions.pde	/^void blackOut(boolean state) {$/;"	m
blackOutToggle	functions.pde	/^void blackOutToggle() {$/;"	m
blinky	memory.pde	/^  boolean blinky = true;$/;"	f	class:soundDetect
blue	Wash.pde	/^  int red, green, blue, white, dim;$/;"	f	class:colorName
blue	Wash.pde	/^  int red, green, blue, white, dim;$/;"	f	class:colorWash
blue	Wash.pde	/^  int red, green, blue, white;$/;"	f	class:Color
blue	fixture.pde	/^  int red, green, blue; \/\/color values$/;"	f	class:fixture
booleanController	settings.pde	/^  Switch booleanController;$/;"	f	class:SettingController
bottomMenu	fixture.pde	/^  FixtureDMX bottomMenu;$/;"	f	class:fixture
bottomMenuChController	Lmenu.pde	/^  bottomMenuChController(int xIn, int yIn, int assign, int prof, String text) {$/;"	m	class:bottomMenuChController
bottomMenuChController	Lmenu.pde	/^class bottomMenuChController {$/;"	c
bottomMenuControlBoxControllers	Lmenu.pde	/^bottomMenuChController[] bottomMenuControlBoxControllers;\/\/|$/;"	typedefs
bottomMenuControlBoxDMXValues	Lmenu.pde	/^int[] bottomMenuControlBoxDMXValues;                     \/\/|$/;"	typedefs
bottomMenuControlBoxDisplayText	Lmenu.pde	/^String bottomMenuControlBoxDisplayText;                  \/\/|$/;"	typedefs
bottomMenuControlBoxHeight	Lmenu.pde	/^int bottomMenuControlBoxHeight = 200;                    \/\/|$/;"	typedefs
bottomMenuControlBoxSubstr	Lmenu.pde	/^String bottomMenuControlBoxSubstr = "bottomMenuControlBox";\/\/|$/;"	typedefs
bottomMenuControlBoxWidth	Lmenu.pde	/^int bottomMenuControlBoxWidth = 20*65;                   \/\/|$/;"	typedefs
bottomMenuDMXUpdate	Lmenu.pde	/^void bottomMenuDMXUpdate() {$/;"	m
bottomMenuOrder	DMX_Controller.pde	/^int[] bottomMenuOrder = new int[numberOfAllFixtures];$/;"	typedefs
bridgedH	hover.pde	/^  int bridgedW, bridgedH; \/\/Height and width in parent$/;"	f	class:Mouse
bridgedMode	hover.pde	/^  boolean bridgedMode = false;$/;"	f	class:Mouse
bridgedModeName	hover.pde	/^  String bridgedModeName;$/;"	f	class:Mouse
bridgedModeParent	hover.pde	/^  Mouse bridgedModeParent;$/;"	f	class:Mouse
bridgedW	hover.pde	/^  int bridgedW, bridgedH; \/\/Height and width in parent$/;"	f	class:Mouse
bridgedX	hover.pde	/^  int bridgedX, bridgedY; \/\/Offset in parent$/;"	f	class:Mouse
bridgedY	hover.pde	/^  int bridgedX, bridgedY; \/\/Offset in parent$/;"	f	class:Mouse
brightness	colPicker.pde	/^int brightness = 255*2;$/;"	f	class:HSBColorPicker
brightness	memory.pde	/^  int step, brightness, brightness1;$/;"	f	class:chase
brightness1	memory.pde	/^  int step, brightness, brightness1;$/;"	f	class:chase
buffer_size	DMX_Controller.pde	/^int buffer_size = 1024;  \/\/ also sets FFT size (frequency resolution)           \/\/|$/;"	typedefs
buttonText	DMX_Controller.pde	/^String[] buttonText = new String[100];$/;"	typedefs
buttons	Lmenu.pde	/^  void buttons() {$/;"	m	class:bottomMenuChController
calcMaschineAutoTap	midi.pde	/^void calcMaschineAutoTap() {$/;"	m
calculateWave	cp5.pde	/^  void calculateWave() {$/;"	m	class:ControlFrame
camX	f3D.pde	/^float camX = s1.width\/2.0, camY = s1.height\/2.0 + 4000, camZ = 1000;$/;"	typedefs
camY	f3D.pde	/^float camX = s1.width\/2.0, camY = s1.height\/2.0 + 4000, camZ = 1000;$/;"	typedefs
camZ	f3D.pde	/^float camX = s1.width\/2.0, camY = s1.height\/2.0 + 4000, camZ = 1000;$/;"	typedefs
capture	hover.pde	/^  void capture(HoverableElement elm) {$/;"	m	class:Mouse
captureName	GUI.pde	/^  String captureName;$/;"	f	class:Switch
captured	hover.pde	/^  boolean captured = false;$/;"	f	class:Mouse
capturedElement	hover.pde	/^  HoverableElement capturedElement;$/;"	f	class:Mouse
centerX	f3D.pde	/^int centerX;$/;"	typedefs
centerY	f3D.pde	/^int centerY;$/;"	typedefs
cf	DMX_Controller.pde	/^ControlFrame cf;$/;"	typedefs
ch	DMX_Controller.pde	/^int[] ch = new int[512];$/;"	typedefs
changeColorFixtureId	DMX_Controller.pde	/^int changeColorFixtureId = 0;$/;"	typedefs
changeCrossFadeValue	functions.pde	/^void changeCrossFadeValue(int val) {$/;"	m
changeFade	memory.pde	/^      void changeFade(int val) {$/;"	m	class:chase
changeGrandMasterValue	functions.pde	/^void changeGrandMasterValue(int val) {$/;"	m
changeInputMode	memory.pde	/^        void changeInputMode(int v) {$/;"	m	class:chase
changeOutputMode	memory.pde	/^        void changeOutputMode(int v) {$/;"	m	class:chase
changeTime	memory.pde	/^  int[] changeTime;$/;"	f	class:chase
changed	colPicker.pde	/^  boolean changed() {$/;"	m	class:HSBColorPicker
changed	memory.pde	/^  int[] changed;$/;"	f	class:chase
channelNames	profiles.pde	/^  String[] channelNames;$/;"	f	class:FixtureProfile
channelStart	fixture.pde	/^  int channelStart;$/;"	f	class:fixture
channelTypes	profiles.pde	/^  int[] channelTypes;$/;"	f	class:FixtureProfile
channels	DMX_Controller.pde	/^int channels = outputChannels;                                                                             \/\/|||$/;"	typedefs
channelsToDim	DMX_in.pde	/^void channelsToDim() { $/;"	m
chase	memory.pde	/^  chase(memory parent) {$/;"	m	class:chase
chase	memory.pde	/^  void chase() {$/;"	m	class:memory
chase	memory.pde	/^class chase { \/\/Begin of chase class--------------------------------------------------------------------------------------------------------------------------------------$/;"	c
chaseBright1	DMX_Controller.pde	/^int[] chaseBright1 = new int[numberOfMemories];$/;"	typedefs
chaseBright2	DMX_Controller.pde	/^int[] chaseBright2 = new int[numberOfMemories];$/;"	typedefs
chaseFade	DMX_Controller.pde	/^int chaseFade = 255;$/;"	typedefs
chaseMode	DMX_Controller.pde	/^int chaseMode; \/\/1 = s2l, 2 = manual, 3 = auto$/;"	typedefs
chaseModeByMemoryNumber	DMX_Controller.pde	/^int[] chaseModeByMemoryNumber = new int[1000];$/;"	typedefs
chaseSpeed	DMX_Controller.pde	/^int chaseSpeed = 500;$/;"	typedefs
chaseStep1	DMX_Controller.pde	/^int chaseStep1 = 1;$/;"	typedefs
chaseStep2	DMX_Controller.pde	/^int chaseStep2;$/;"	typedefs
check	DMX_Controller.pde	/^int[] check = { 126, 5, 14, 0, 0, 0 };$/;"	typedefs
checkThemeMode	functions.pde	/^void checkThemeMode() {$/;"	m
checkedPresets	cp5.pde	/^  int checkedPresets = 0;$/;"	f	class:ControlFrame
childrenLength	cp5.pde	/^  int childrenLength = 0;$/;"	f	class:ControlFrame
clear	Wash.pde	/^  void clear() { \/\/Clear colorWash$/;"	m	class:colorWash
clear	fixture.pde	/^  void clear() {$/;"	m	class:FixtureArray
clearAllTheWashes	Wash.pde	/^void clearAllTheWashes() {$/;"	m
clearMaschineAutoTap	midi.pde	/^void clearMaschineAutoTap() {$/;"	m
clearThis	fixture.pde	/^  void clearThis() {$/;"	m	class:FixtureArray
close	GUI.pde	/^  void close() {$/;"	m	class:contextMenu
colorMenuOffset	Wash.pde	/^PVector colorMenuOffset = new PVector(0, 0);$/;"	typedefs
colorMode	Wash.pde	/^  int colorMode;$/;"	f	class:colorName
colorName	Wash.pde	/^  colorName(String colour, int r, int g, int b) {$/;"	m	class:colorName
colorName	Wash.pde	/^  colorName(String colour, int r, int g, int b, int w) {$/;"	m	class:colorName
colorName	Wash.pde	/^class colorName {$/;"	c
colorNames	Wash.pde	/^colorName[] colorNames = new colorName[30];$/;"	typedefs
colorNumber	fixture.pde	/^  int colorNumber;$/;"	f	class:fixture
colorPick	colPicker.pde	/^HSBColorPicker colorPick = new HSBColorPicker();$/;"	typedefs
colorSelectorOpen	colPicker.pde	/^boolean colorSelectorOpen = true;$/;"	f	class:HSBColorPicker
colorWash	Wash.pde	/^  colorWash(String colour) {$/;"	m	class:colorWash
colorWash	Wash.pde	/^  colorWash(int h, int s, int b, String mode) {$/;"	m	class:colorWash
colorWash	Wash.pde	/^  colorWash(int r, int g, int b) {$/;"	m	class:colorWash
colorWash	Wash.pde	/^  colorWash(int r, int g, int b, int w) {$/;"	m	class:colorWash
colorWash	Wash.pde	/^  colorWash(int r, int g, int b, int w, int d) {$/;"	m	class:colorWash
colorWash	Wash.pde	/^class colorWash {$/;"	c
colorWashSetup	Wash.pde	/^void colorWashSetup() {$/;"	m
complete	fade.pde	/^  boolean complete;$/;"	f	class:Fade
conToStr	Umenu.pde	/^String conToStr(int val, int mindigits) {$/;"	m
cone	f3D.pde	/^PShape cone;$/;"	f	class:secondApplet1
coneScale	f3D.pde	/^int coneScale = 500;$/;"	typedefs
content	memory.pde	/^  int[] content; \/\/all the content in chase - in the future also presets$/;"	f	class:chase
contextMenu	GUI.pde	/^  contextMenu(PApplet p) {$/;"	m	class:contextMenu
contextMenu	GUI.pde	/^class contextMenu {$/;"	c
contextMenu1	GUI.pde	/^contextMenu contextMenu1 = new contextMenu(this); $/;"	typedefs
contextMenuOption	GUI.pde	/^  contextMenuOption(Method action, String displayText) {$/;"	m	class:contextMenuOption
contextMenuOption	GUI.pde	/^class contextMenuOption {$/;"	c
control	cp5.pde	/^  public ControlP5 control() {$/;"	m	class:ControlFrame
controlEvent	cp5.pde	/^  public void controlEvent(ControlEvent theEvent) {$/;"	m	class:ControlFrame
controlP5channel	DMX_Controller.pde	/^int[] controlP5channel = new int[controlP5channels+1]; \/\/tietokoneen faderien arvo                         \/\/|||$/;"	typedefs
controlP5channelOld	DMX_Controller.pde	/^int[] controlP5channelOld = new int[controlP5channels+1]; \/\/tietokoneen faderien vanha arvo                \/\/|||$/;"	typedefs
controlP5channels	DMX_Controller.pde	/^int controlP5channels = 12; \/\/tietokoneen faderien määrä                                                   \/\/|||$/;"	typedefs
controlP5place	DMX_Controller.pde	/^int controlP5place = 1; \/\/tietokoneen faderien ohjaamat kanavat                                            \/\/|||$/;"	typedefs
controllerChange	Draw.pde	/^void controllerChange(ControlChange change) {$/;"	m
controllerStackHeight	settings.pde	/^  int controllerStackHeight = 0;$/;"	f	class:SettingsTab
controllerStackWidth	Lmenu.pde	/^  int controllerStackWidth = 0;$/;"	f	class:LowerMenu
controllers	settings.pde	/^  SettingController[] controllers;$/;"	f	class:SettingsTab
convertColor	Wash.pde	/^int[] convertColor(int[] original, int from, int to) {$/;"	m
coreFilePath	file.pde	/^String coreFilePath = "core.csv";$/;"	typedefs
countActualValue	fade.pde	/^  void countActualValue() {$/;"	m	class:Fade
countBrightness	colPicker.pde	/^  void countBrightness() {$/;"	m	class:HSBColorPicker
countHue	colPicker.pde	/^  void countHue() {$/;"	m	class:HSBColorPicker
countSaturation	colPicker.pde	/^  void countSaturation() {$/;"	m	class:HSBColorPicker
counter	DMX_Controller.pde	/^int counter;$/;"	typedefs
cp5	cp5.pde	/^  ControlP5 cp5;$/;"	f	class:ControlFrame
createColorNames	Wash.pde	/^void createColorNames() {$/;"	m
createDMXobjects	fixture.pde	/^  void createDMXobjects() {$/;"	m	class:fixture
createDefaultWindows	GUI.pde	/^  void createDefaultWindows() {$/;"	m	class:SubWindowHandler
createFixtureProfiles	profiles.pde	/^void createFixtureProfiles() {$/;"	m
createMemoryObjects	memory.pde	/^void createMemoryObjects() {$/;"	m
createNew	cp5.pde	/^  boolean createNew = false;$/;"	f	class:ControlFrame
createNewFixtureAt00	fixture.pde	/^void createNewFixtureAt00() {$/;"	m
createPresetsArray	memory.pde	/^  void createPresetsArray() {$/;"	m	class:chase
createQuickChase	memory.pde	/^   void createQuickChase() {$/;"	m	class:chase
createdAnsaTypeBoxes	cp5.pde	/^  int createdAnsaTypeBoxes = 0;$/;"	f	class:ControlFrame
createdAnsaXBoxes	cp5.pde	/^  int createdAnsaXBoxes = 0;$/;"	f	class:ControlFrame
createdAnsaYBoxes	cp5.pde	/^  int createdAnsaYBoxes = 0;$/;"	f	class:ControlFrame
createdAnsaZBoxes	cp5.pde	/^  int createdAnsaZBoxes = 0;$/;"	f	class:ControlFrame
currentAvg	memory.pde	/^  float[] currentAvg = new float[getFreqMax()];$/;"	f	class:soundDetect
currentAvgCounter	memory.pde	/^  float[] currentAvgCounter = new float[getFreqMax()];$/;"	f	class:soundDetect
currentAvgTemp	memory.pde	/^  float[] currentAvgTemp = new float[getFreqMax()];$/;"	f	class:soundDetect
currentBottomMenuControlBoxOwner	Lmenu.pde	/^int currentBottomMenuControlBoxOwner;                    \/\/|$/;"	typedefs
currentMessage	Lmenu.pde	/^  String currentMessage;$/;"	f	class:Notifier
cursor	GUI.pde	/^  int cursor;$/;"	f	class:CursorHandler
cursor	GUI.pde	/^CursorHandler cursor = new CursorHandler();$/;"	typedefs
cyan	Wash.pde	/^  float cyan, magenta, yellow, black;$/;"	f	class:CMYK_Colour
declareElement	hover.pde	/^  boolean declareElement(String name, String ontopof, int x1, int y1, int x2, int y2) {$/;"	m	class:Mouse
declareElement	hover.pde	/^  void declareElement(String name, int priority, int x1, int y1, int x2, int y2) {$/;"	m	class:Mouse
declareMouseElement	GUI.pde	/^  void declareMouseElement() {$/;"	m	class:contextMenu
declareUpdateElement	hover.pde	/^  boolean declareUpdateElement(String name, String ontopof, int x1, int y1, int x2, int y2) {$/;"	m	class:Mouse
declareUpdateElement	hover.pde	/^  void declareUpdateElement(String name, int priority, int x1, int y1, int x2, int y2) {$/;"	m	class:Mouse
declareUpdateElementRelative	hover.pde	/^  boolean declareUpdateElementRelative(String name, String ontopof, int x1, int y1, int x2, int y2) {$/;"	m	class:Mouse
declareUpdateElementRelative	hover.pde	/^  boolean declareUpdateElementRelative(String name, String ontopof, int x1, int y1, int x2, int y2, PGraphics g) {$/;"	m	class:Mouse
declareUpdateElementRelative	hover.pde	/^  void declareUpdateElementRelative(String name, int priority, int x1, int y1, int x2, int y2) {$/;"	m	class:Mouse
declareUpdateElementRelative	hover.pde	/^  void declareUpdateElementRelative(String name, int priority, int x1, int y1, int x2, int y2, PGraphics g) {$/;"	m	class:Mouse
def	DMX_Controller.pde	/^int def;$/;"	typedefs
defaultConstrain	functions.pde	/^    int defaultConstrain(int val) {$/;"	m
defaultVal	settings.pde	/^  int defaultVal;$/;"	f	class:IntSettingController
deleteAll	cp5.pde	/^  boolean deleteAll = false;$/;"	f	class:ControlFrame
description	settings.pde	/^  String description;$/;"	f	class:SettingController
dim	DMX_Controller.pde	/^int[] dim = new int[512]; \/\/fixtuurien kirkkaus todellisuudessa (dmx output), sekä visualisaatiossa$/;"	typedefs
dim	Wash.pde	/^  int red, green, blue, white, dim;$/;"	f	class:colorName
dim	Wash.pde	/^  int red, green, blue, white, dim;$/;"	f	class:colorWash
dimInput	DMX_Controller.pde	/^int[] dimInput = new int[512];$/;"	typedefs
dimOld	DMX_Controller.pde	/^int[] dimOld = new int[512];$/;"	typedefs
dimmerLast	fixture.pde	/^  int dimmerLast = 0;$/;"	f	class:fixture
disableByType	Wash.pde	/^  boolean disableByType;$/;"	f	class:colorWash
disabledTypes	Wash.pde	/^  int[] disabledTypes;$/;"	f	class:colorWash
displayText	Lmenu.pde	/^  String displayText;$/;"	f	class:bottomMenuChController
dmxCheck	DMX_in.pde	/^void dmxCheck() {$/;"	m
dmxToDim	DMX_in.pde	/^void dmxToDim() {$/;"	m
dmxTriedTimes	DMX_proc.pde	/^int dmxTriedTimes = 0;$/;"	typedefs
doBoxSelect	a2D.pde	/^void doBoxSelect() {$/;"	m
doByMaschineKnob	midi.pde	/^void doByMaschineKnob() {$/;"	m
doSmoothScroll	Lmenu.pde	/^  boolean doSmoothScroll = false;$/;"	f	class:LowerMenu
doSmoothScroll	settings.pde	/^  boolean doSmoothScroll = false;$/;"	f	class:SettingsTab
doTrussMoving	functions.pde	/^void doTrussMoving(int i, PVector mouseRotated) {$/;"	m
dragStartX	Lmenu.pde	/^  int dragStartX;$/;"	f	class:bottomMenuChController
dragY	Lmenu.pde	/^  int dragY;$/;"	f	class:bottomMenuChController
draggingMemoryId	Rmenu.pde	/^int     draggingMemoryId;$/;"	typedefs
draw	Draw.pde	/^void draw() {$/;"	m
draw	GUI.pde	/^  boolean draw() {$/;"	m	class:SubWindowContainer
draw	GUI.pde	/^  boolean draw() {$/;"	m	class:Switch
draw	GUI.pde	/^  void draw() {$/;"	m	class:SubWindowHandler
draw	GUI.pde	/^  void draw() {$/;"	m	class:contextMenu
draw	Lmenu.pde	/^  void draw() {$/;"	m	class:bottomMenuChController
draw	Lmenu.pde	/^  void draw(PGraphics g, Mouse mouse, boolean translate) {$/;"	m	class:LowerMenu
draw	Lmenu.pde	/^  void draw(int w) {$/;"	m	class:Notifier
draw	Rmenu.pde	/^  void draw() {$/;"	m	class:MemoryCreationBox
draw	Rmenu.pde	/^  void draw(PGraphics g, Mouse mouse, boolean translate) {$/;"	m	class:MemoryCreationBox
draw	cp5.pde	/^  public void draw() {$/;"	m	class:ControlFrame
draw	f3D.pde	/^void draw() {$/;"	m	class:secondApplet1
draw	fixture.pde	/^  void draw() {$/;"	m	class:fixture
draw	memory.pde	/^  void draw() {$/;"	m	class:chase
draw	memory.pde	/^  void draw() {$/;"	m	class:memory
draw	memory.pde	/^  void draw() {$/;"	m	class:sine
draw	settings.pde	/^  void draw() {$/;"	m	class:IntSettingController
draw	settings.pde	/^  void draw() {$/;"	m	class:StringSettingController
draw	settings.pde	/^  void draw(PGraphics buffer, PGraphics g, Mouse mouse) {$/;"	m	class:SettingController
draw	settings.pde	/^  void draw(PGraphics g, Mouse mouse, boolean translate) {$/;"	m	class:SettingsWindow
draw	text.pde	/^  public void draw() {$/;"	m	class:secondApplet
draw2D	fixture.pde	/^  void draw2D(int index) {$/;"	m	class:fixture
drawBottomMenuChControllerButton	Lmenu.pde	/^void drawBottomMenuChControllerButton(String text, boolean down) {$/;"	m
drawBottomMenuChControllerSlider	Lmenu.pde	/^void drawBottomMenuChControllerSlider(int value) {$/;"	m
drawBottomMenuChControllerSlider	Lmenu.pde	/^void drawBottomMenuChControllerSlider(int value, PGraphics g) {$/;"	m
drawBottomMenuControlBox	Lmenu.pde	/^void drawBottomMenuControlBox() {$/;"	m
drawChildren	settings.pde	/^  void drawChildren(PGraphics g, Mouse mouse) {$/;"	m	class:SettingsTab
drawColorWashMenu	Wash.pde	/^void drawColorWashMenu() { \/\/Color wash selection menu box$/;"	m
drawFbox	Lmenu.pde	/^  void drawFbox(int id, PGraphics g, Mouse mouse) {$/;"	m	class:LowerMenu
drawFlood	f3D.pde	/^void drawFlood(int posX, int posY, int posZ, int rotZ, int rotX, int scale, float coneDiam, color coneColor, int conedim, int coneZOffset, int parentAnsa, PShape lightModel, int LightParam) {$/;"	m	class:secondApplet1
drawLeftSideButton	Umenu.pde	/^boolean drawLeftSideButton(int round, String text) {$/;"	m
drawLight	f3D.pde	/^void drawLight(int posX, int posY, int posZ, int rotZ, int rotX, int scale, float coneDiam, color coneColor, int conedim, int coneZOffset, int parentAnsa, PShape lightModel) {$/;"	m	class:secondApplet1
drawMHX	f3D.pde	/^void drawMHX(int posX, int posY, int posZ, int rotZ, int rotX, int scale, float coneDiam, color coneColor, int conedim, int coneZOffset, int parentAnsa, PShape lightModel) {$/;"	m	class:secondApplet1
drawMainWindow	a2D.pde	/^void drawMainWindow() {$/;"	m
drawMemoryController	Rmenu.pde	/^void drawMemoryController(int cMId, String text) {$/;"	m
drawMemoryControllerToBuffer	Rmenu.pde	/^void drawMemoryControllerToBuffer(int controlledMemoryId, String text, PGraphics g, boolean checkMouse, boolean bypassDrawBlock) {$/;"	m
drawModeSelection	Rmenu.pde	/^  void drawModeSelection(PGraphics g, Mouse mouse) {$/;"	m	class:MemoryCreationBox
drawSelector	settings.pde	/^  boolean drawSelector(boolean selected, PGraphics g, Mouse mouse) {$/;"	m	class:SettingsTab
drawSlotSelector	Rmenu.pde	/^  void drawSlotSelector(PGraphics g, Mouse mouse) {$/;"	m	class:MemoryCreationBox
drawStrobo	f3D.pde	/^void drawStrobo(int posX, int posY, int posZ, int rotZ, int rotX, int scale, float coneDiam, color coneColor, int conedim, int coneZOffset, int parentAnsa, PShape lightModel, boolean stroboIsOn) {$/;"	m	class:secondApplet1
drawText	settings.pde	/^  void drawText(int x, int y, PGraphics buffer) {$/;"	m	class:SettingController
drawToBuffer	GUI.pde	/^  boolean drawToBuffer(PGraphics b, PGraphics g, Mouse mouse) {$/;"	m	class:Switch
drawToBuffer	settings.pde	/^  void drawToBuffer(PGraphics b, Mouse mouse) {$/;"	m	class:StringSettingController
drawToBuffer	settings.pde	/^  void drawToBuffer(PGraphics b, PGraphics g, Mouse mouse) {$/;"	m	class:IntSettingController
drawTypeSpecificOptions	Rmenu.pde	/^  void drawTypeSpecificOptions(PGraphics g, Mouse mouse) {$/;"	m	class:MemoryCreationBox
dummyFixture	fixture.pde	/^  fixture dummyFixture;  $/;"	f	class:FixtureArray
effChaser	cp5.pde	/^  boolean effChaser;$/;"	f	class:ControlFrame
effChaserOld	cp5.pde	/^  boolean effChaserOld = false;$/;"	f	class:ControlFrame
elements	hover.pde	/^  ArrayList<HoverableElement> elements = new ArrayList<HoverableElement>();$/;"	f	class:Mouse
elmIsHover	hover.pde	/^  boolean elmIsHover(String objName) {$/;"	m	class:Mouse
elmIsOver	hover.pde	/^  boolean elmIsOver(String objName) {$/;"	m	class:Mouse
empty	memory.pde	/^  void empty() {$/;"	m	class:memory
enabled	hover.pde	/^  boolean enabled;    \/\/Is element currently visible and clickable$/;"	f	class:HoverableElement
enabled	memory.pde	/^  boolean enabled = true;$/;"	f	class:memory
endBoxSelect	a2D.pde	/^void endBoxSelect() {$/;"	m
enttecDMXchannel	DMX_Controller.pde	/^int[] enttecDMXchannel = new int[enttecDMXchannels+1]; \/\/DMX kanavan arvo                                  \/\/|||$/;"	typedefs
enttecDMXchannelOld	DMX_Controller.pde	/^int[] enttecDMXchannelOld = new int[enttecDMXchannels+1]; \/\/DMX kanavan vanha arvo                         \/\/|||$/;"	typedefs
enttecDMXchannels	DMX_Controller.pde	/^int enttecDMXchannels = 600; \/\/DMX kanavien määrä                                                          \/\/|||$/;"	typedefs
enttecDMXplace	DMX_Controller.pde	/^int enttecDMXplace = 1; \/\/DMX ohjatut kanavat                                                              \/\/|||$/;"	typedefs
enttecIndex	DMX_Controller.pde	/^int enttecIndex = 1; \/\/ Enttecin USB DMX palikan COM-portin järjestysnumero                                                                                               \/\/|$/;"	typedefs
even	Wash.pde	/^  boolean even = true;$/;"	f	class:colorWash
even	Wash.pde	/^  void even() { odd = false; even = true; }$/;"	m	class:colorWash
execute	GUI.pde	/^  void execute(int optionId) {$/;"	m	class:contextMenu
expires	hover.pde	/^  int expires = -1;$/;"	f	class:HoverableElement
f	DMX_Controller.pde	/^PFrame1 f = new PFrame1(this); \/\/Luodaan toinenkin uusi ikkuna$/;"	typedefs
fT	Wash.pde	/^    int fT(int i) {$/;"	m	class:colorWash
fade	fixture.pde	/^  FixtureDMX fade;$/;"	f	class:fixture
fade	memory.pde	/^  int fade, ownFade;$/;"	f	class:chase
fade	memory.pde	/^  void fade() {$/;"	m	class:memory
fadeMode	memory.pde	/^  int fadeMode; \/\/1 = from own, 2 = from own*master, 3 = from master$/;"	f	class:chase
fadeModeDown	memory.pde	/^      void fadeModeDown() {$/;"	m	class:chase
fadeModeLimit	memory.pde	/^  int[] fadeModeLimit = { 1, 3 };$/;"	f	class:chase
fadeModeLimit	memory.pde	/^  int[] fadeModeLimit = { 1, 3 };$/;"	typedefs
fadeModeUp	memory.pde	/^      void fadeModeUp() {$/;"	m	class:chase
fades	fixture.pde	/^  Fade[] fades = new Fade[universalDMXlength];$/;"	f	class:fixture
fades	fixtureDMX.pde	/^  Fade[] fades;$/;"	f	class:FixtureDMX
fft	DMX_Controller.pde	/^FFT fft;                                                                        \/\/|$/;"	typedefs
fg	GUI.pde	/^  color bg, fg;$/;"	f	class:Switch
fileDialogInput	file.pde	/^void fileDialogInput() {     $/;"	m
fileDialogOutput	file.pde	/^void fileDialogOutput() {                $/;"	m
fileSeparator	DMX_Controller.pde	/^String fileSeparator = java.io.File.separator;$/;"	typedefs
finalValue	memory.pde	/^  int[] finalValue;$/;"	f	class:chase
firstCaptureFrame	hover.pde	/^  boolean firstCaptureFrame = false;$/;"	f	class:Mouse
firstTimeAtZero	memory.pde	/^  boolean firstTimeAtZero;$/;"	f	class:memory
firstTimeLoading	memory.pde	/^  boolean firstTimeLoading = true;$/;"	f	class:chase
fixture	fixture.pde	/^  fixture() {}$/;"	m	class:fixture
fixture	fixture.pde	/^  fixture(int dim, int r, int g, int b, int x, int y, int z, int rZ, int rX, int ch, int parentA, int param, String fixtType) {$/;"	m	class:fixture
fixture	fixture.pde	/^  fixture(int dim, int r, int g, int b, int x, int y, int z, int rZ, int rX, int ch, int parentA, int param, int fixtTypeId) {$/;"	m	class:fixture
fixture	fixture.pde	/^class fixture {$/;"	c
fixtureColorChangeHasHappened	cp5.pde	/^  boolean fixtureColorChangeHasHappened = false;$/;"	f	class:ControlFrame
fixtureForSelected	DMX_Controller.pde	/^fixture[] fixtureForSelected = new fixture[1];$/;"	typedefs
fixtureId	GUI.pde	/^  int fixtureId = 0;$/;"	f	class:contextMenu
fixtureInput	input.pde	/^class fixtureInput {$/;"	c
fixtureInputs	DMX_Controller.pde	/^fixtureInput[] fixtureInputs = new fixtureInput[2];$/;"	typedefs
fixtureIsLedByType	profiles.pde	/^boolean fixtureIsLedByType(int fT) { return fixtureUseRgbByType(fT); }$/;"	m
fixtureIsSelected	Wash.pde	/^    boolean fixtureIsSelected(int i) {$/;"	m	class:colorWash
fixtureMasterValue	DMX_Controller.pde	/^int fixtureMasterValue = 255; \/\/Fixtuurien master-muuttuja$/;"	typedefs
fixtureName	profiles.pde	/^  String fixtureName;$/;"	f	class:FixtureProfile
fixtureProfiles	profiles.pde	/^FixtureProfile[] fixtureProfiles = new FixtureProfile[19]; $/;"	typedefs
fixtureSize	fixture.pde	/^  fixtureSize(int fixtureTypeId) {$/;"	m	class:fixtureSize
fixtureSize	fixture.pde	/^  fixtureSize(int wdt, int hgt, boolean isDrwn) {$/;"	m	class:fixtureSize
fixtureSize	fixture.pde	/^class fixtureSize {$/;"	c
fixtureType	fixture.pde	/^  String fixtureType;$/;"	f	class:fixture
fixtureTypeId	fixture.pde	/^  int fixtureTypeId;$/;"	f	class:fixture
fixtureUseDimByType	profiles.pde	/^boolean fixtureUseDimByType(int fT) { return fT == 11 || fT == 13 || fT == 16; }$/;"	m
fixtureUseRgbByType	profiles.pde	/^boolean fixtureUseRgbByType(int fT) { return fT >= 10 && fT <= 16; }$/;"	m
fixtureUseWhiteByType	profiles.pde	/^boolean fixtureUseWhiteByType(int fT) { return fT >= 12 && fT <= 16; }$/;"	m
fixtures	DMX_Controller.pde	/^FixtureArray fixtures = new FixtureArray();$/;"	typedefs
floatState	settings.pde	/^  float floatState;$/;"	f	class:IntSettingController
flood	f3D.pde	/^PShape flood;$/;"	f	class:secondApplet1
floodConeDiameter	f3D.pde	/^float floodConeDiameter = 0.8;$/;"	f	class:secondApplet1
floodCover	f3D.pde	/^PShape floodCover;$/;"	f	class:secondApplet1
freq	memory.pde	/^  int freq(int i) { \/\/Get freq of specific band$/;"	m	class:soundDetect
freqToLight	memory.pde	/^  void freqToLight() { \/\/This function gives frequence values to chase presets$/;"	m	class:chase
ftIsMhX50	fixture.pde	/^    boolean ftIsMhX50() { \/\/This function is only to check is the fixtureType moving head (17 or 16)$/;"	m	class:fixture
fullOn	functions.pde	/^void fullOn(boolean state) {$/;"	m
fullOnToggle	functions.pde	/^void fullOnToggle() {$/;"	m
get	fixture.pde	/^  fixture get(int fid) {$/;"	m	class:FixtureArray
getActualValue	fade.pde	/^  int getActualValue() {$/;"	m	class:Fade
getArrayId	fixture.pde	/^  int getArrayId(int fid) {$/;"	m	class:FixtureArray
getBand	memory.pde	/^  float getBand(int i) {$/;"	m	class:soundDetect
getBeatMode	memory.pde	/^        String getBeatMode() {                                                                 $/;"	m	class:chase
getBeatModeId	memory.pde	/^        int getBeatModeId() {   $/;"	m	class:chase
getBlue	Wash.pde	/^  int getBlue() { return blue; }$/;"	m	class:Color
getBridgedMouseX	hover.pde	/^  int getBridgedMouseX() {$/;"	m	class:Mouse
getBridgedMouseY	hover.pde	/^  int getBridgedMouseY() {$/;"	m	class:Mouse
getChNamesByFixType	profiles.pde	/^String[] getChNamesByFixType(int fT) {$/;"	m
getColor	fixture.pde	/^  color getColor() {$/;"	m	class:fixture
getColorFromName	Wash.pde	/^int[] getColorFromName(String colour) {$/;"	m
getColorFromPicker	colPicker.pde	/^  color getColorFromPicker() {$/;"	m	class:HSBColorPicker
getColor_wDim	fixture.pde	/^  color getColor_wDim() {$/;"	m	class:fixture
getDMX	fixture.pde	/^  int[] getDMX() {$/;"	m	class:fixture
getDMX	fixtureDMX.pde	/^  int[] getDMX() {$/;"	m	class:FixtureDMX
getDMXLength	fixture.pde	/^  int getDMXLength() {$/;"	m	class:fixture
getDMXforOutput	fixture.pde	/^  int[] getDMXforOutput() {$/;"	m	class:fixture
getDMXfromUniversal	profiles.pde	/^int[] getDMXfromUniversal(int fT, int[] universal) {$/;"	m
getDimmerWithMaster	fixture.pde	/^  int getDimmerWithMaster() {$/;"	m	class:fixture
getDrawHeight	settings.pde	/^  int getDrawHeight() {$/;"	m	class:SettingController
getElementByName	hover.pde	/^  HoverableElement getElementByName(String name) {$/;"	m	class:Mouse
getElementIndexByName	hover.pde	/^  int getElementIndexByName(String name) {$/;"	m	class:Mouse
getExternalBoValue	settings.pde	/^  boolean getExternalBoValue(int var) {$/;"	m	class:SettingsWindow
getExternalInValue	settings.pde	/^  int getExternalInValue(int var) {$/;"	m	class:SettingsWindow
getFadeModeDesc	memory.pde	/^        String getFadeModeDesc() {$/;"	m	class:chase
getFixtureName	profiles.pde	/^String getFixtureName(int id) {$/;"	m
getFixtureNameByType	profiles.pde	/^String getFixtureNameByType(int type) {$/;"	m
getFixtureSize	profiles.pde	/^int[] getFixtureSize(int id) {$/;"	m
getFixtureSizeByType	profiles.pde	/^int[] getFixtureSizeByType(int type) { $/;"	m
getFixtureTypeId	fixture.pde	/^  int getFixtureTypeId() {$/;"	m	class:fixture
getFixtureTypeId1	profiles.pde	/^int getFixtureTypeId1(String fixtureType) {$/;"	m
getFreqMax	memory.pde	/^  int getFreqMax() { \/\/How many bands are available$/;"	m	class:soundDetect
getGreen	Wash.pde	/^  int getGreen() { return green; }$/;"	m	class:Color
getInputModeDesc	memory.pde	/^        String getInputModeDesc() {$/;"	m	class:chase
getInputModeMasterDesc	memory.pde	/^        String getInputModeMasterDesc() {$/;"	m
getInvertedValue	functions.pde	/^    int getInvertedValue(int val, int lim_low, int lim_hi) {$/;"	m
getMemoryTypeName	Rmenu.pde	/^String getMemoryTypeName(int numero) {$/;"	m
getNext	functions.pde	/^    int getNext(int current, int lim_low, int lim_hi) {$/;"	m
getNext	functions.pde	/^    int getNext(int current, int[] lim) {$/;"	m
getNumberOfActivePresets	memory.pde	/^  int getNumberOfActivePresets() {$/;"	m	class:chase
getNumberOfFixtureTypes	profiles.pde	/^int getNumberOfFixtureTypes() {$/;"	m
getOutputModeDesc	memory.pde	/^        String getOutputModeDesc() {$/;"	m	class:chase
getOutputModeMasterDesc	memory.pde	/^        String getOutputModeMasterDesc() {$/;"	m
getPresetValue	memory.pde	/^  int getPresetValue(int i) {$/;"	m	class:chase
getPresets	memory.pde	/^  int[] getPresets() {$/;"	m	class:chase
getRGB	Wash.pde	/^  color getRGB() {$/;"	m	class:colorName
getRGBfromName	Wash.pde	/^color getRGBfromName(String colour) {$/;"	m
getRawBand	memory.pde	/^  float getRawBand(int i) {$/;"	m	class:soundDetect
getRawColor	fixture.pde	/^  color getRawColor() {$/;"	m	class:fixture
getRed	Wash.pde	/^  int getRed() { return red; }$/;"	m	class:Color
getReverse	functions.pde	/^    int getReverse(int current, int lim_low, int lim_hi) {$/;"	m
getReverse	functions.pde	/^    int getReverse(int current, int[] lim) {$/;"	m
getScrollXOffset	Lmenu.pde	/^  int getScrollXOffset() {$/;"	m	class:LowerMenu
getSelectorWidth	settings.pde	/^  int getSelectorWidth() {$/;"	m	class:SettingsTab
getSerialList	settings.pde	/^String[] getSerialList() {$/;"	m
getText	memory.pde	/^  String getText() {$/;"	m	class:memory
getTimeAsString	Umenu.pde	/^String getTimeAsString() {$/;"	m
getUniDMX	fixtureDMX.pde	/^  int getUniDMX(int i) { return getUniversalDMX(i); }$/;"	m	class:FixtureDMX
getUniDMX	fixtureDMX.pde	/^  int[] getUniDMX() { return getUniversalDMX(); }$/;"	m	class:FixtureDMX
getUniversalDMX	fixtureDMX.pde	/^  int getUniversalDMX(int i) {$/;"	m	class:FixtureDMX
getUniversalDMX	fixtureDMX.pde	/^  int[] getUniversalDMX() {$/;"	m	class:FixtureDMX
getValue	memory.pde	/^  int getValue() {$/;"	m	class:memory
getValueFromOwner	Lmenu.pde	/^  void getValueFromOwner() {$/;"	m	class:bottomMenuChController
getWhite	Wash.pde	/^  int getWhite() { return white; }$/;"	m	class:Color
getXY	GUI.pde	/^  void getXY() {$/;"	m	class:SubWindowContainer
go	Wash.pde	/^  void go() { \/\/Activate colorWash$/;"	m	class:colorWash
go	memory.pde	/^  boolean go;$/;"	f	class:sine
go	memory.pde	/^  void go() {$/;"	m	class:sine
grandMaster	Draw.pde	/^int grandMaster = 255;$/;"	typedefs
grandMaster	memory.pde	/^  void grandMaster() {$/;"	m	class:memory
green	Wash.pde	/^  int red, green, blue, white, dim;$/;"	f	class:colorName
green	Wash.pde	/^  int red, green, blue, white, dim;$/;"	f	class:colorWash
green	Wash.pde	/^  int red, green, blue, white;$/;"	f	class:Color
green	fixture.pde	/^  int red, green, blue; \/\/color values$/;"	f	class:fixture
h	GUI.pde	/^  int h, w;$/;"	f	class:SubWindowContainer
h	Lmenu.pde	/^  int w, h;$/;"	f	class:LowerMenu
h	Rmenu.pde	/^  int h = 600, w = 300;$/;"	f	class:MemoryCreationBox
h	cp5.pde	/^  int w, h;$/;"	f	class:ControlFrame
h	fixture.pde	/^  int w, h;$/;"	f	class:fixtureSize
h	settings.pde	/^  final int w = 500, h = 500;$/;"	f	class:SettingsWindow
height_	settings.pde	/^  int height_;$/;"	f	class:SettingsTab
hue	colPicker.pde	/^int hue = 0;$/;"	f	class:HSBColorPicker
hueOffset	memory.pde	/^  int hueOffset = 0;$/;"	f	class:chase
iFresu	f3D.pde	/^PShape iFresu;$/;"	f	class:secondApplet1
iFresuConeDiameter	f3D.pde	/^float iFresuConeDiameter = 0.8;$/;"	f	class:secondApplet1
iMap	functions.pde	/^    int iMap(int val, int in_low, int in_hi, int out_low, int out_hi) {$/;"	m
iScreenX	functions.pde	/^int iScreenX(float x, float y) {$/;"	m
iScreenX	functions.pde	/^int iScreenX(float x, float y, PGraphics g) {$/;"	m
iScreenY	functions.pde	/^int iScreenY(float x, float y) {$/;"	m
iScreenY	functions.pde	/^int iScreenY(float x, float y, PGraphics g) {$/;"	m
idLookupTable	fixture.pde	/^ArrayList<Integer> idLookupTable;$/;"	typedefs
in	DMX_Controller.pde	/^AudioInput in;                                                                  \/\/|$/;"	typedefs
in	fixture.pde	/^  FixtureDMX in;$/;"	f	class:fixture
inBds1D	functions.pde	/^boolean inBds1D(float pointer, float x1, float x2){$/;"	m
inBds2D	functions.pde	/^boolean inBds2D(float pointerX, float pointerY, float x1, float y1, float x2, float y2){$/;"	m
inBdsMouse	functions.pde	/^boolean inBdsMouse(int x1, int y1, int x2, int y2) {$/;"	m
inBdsMouseOffst	functions.pde	/^boolean inBdsMouseOffst(int x, int y, int w, int h) {$/;"	m
inBoundsCircle	functions.pde	/^boolean inBoundsCircle(int cPosX, int cPosY, int cRadius, int pointerX, int pointerY) {$/;"	m
incrementingIntArray	functions.pde	/^void incrementingIntArray(int[] array, int start) {$/;"	m
indexOf	functions.pde	/^int indexOf(int[] array, int target) {$/;"	m
indexOfMinCheck	functions.pde	/^int indexOfMinCheck(int[] input, boolean[] checked) {$/;"	m
initFixtureObj	fixture.pde	/^  void initFixtureObj(int dim, int r, int g, int b, int x, int y, int z, int rZ, int rX, int ch, int parentA, int param, int fixtTypeId) {$/;"	m	class:fixture
initSettingsInSetup	settings.pde	/^void initSettingsInSetup() {$/;"	m
initSettingsInSetupSelected	settings.pde	/^int initSettingsInSetupSelected;$/;"	typedefs
initSettingsInSetupStep	settings.pde	/^int initSettingsInSetupStep;$/;"	typedefs
initializeBridge	hover.pde	/^  void initializeBridge(Mouse parent, String nameInParent, int priority, int x_off, int y_off, int w, int h) {$/;"	m	class:Mouse
initializeCOM	DMX_Controller.pde	/^void initializeCOM() {$/;"	m
initializeMaschine	midi.pde	/^void initializeMaschine() {$/;"	m
initiate	GUI.pde	/^  void initiate(Method[] actions, String[] lables, int x, int y) {$/;"	m	class:contextMenu
initiate	GUI.pde	/^  void initiate(String[] actions, String[] lables, int x, int y) {$/;"	m	class:contextMenu
initiate	Rmenu.pde	/^  void initiate(int slot, int lY, int lX) {$/;"	m	class:MemoryCreationBox
initiateForFixture	GUI.pde	/^  void initiateForFixture(int fId) {$/;"	m	class:contextMenu
initiateFromExsisting	Rmenu.pde	/^  void initiateFromExsisting(int memory) {$/;"	m	class:MemoryCreationBox
initiatePassive	Rmenu.pde	/^  void initiatePassive() {$/;"	m	class:MemoryCreationBox
inputMode	memory.pde	/^  int inputMode, outputMode, beatModeId; \/\/What is input and what will output look like$/;"	f	class:chase
inputModeDown	memory.pde	/^        void inputModeDown() {$/;"	m	class:chase
inputModeLimit	memory.pde	/^  int[] inputModeLimit = { 0, 3 };$/;"	f	class:chase
inputModeLimit	memory.pde	/^  int[] inputModeLimit = { 1, 3 };$/;"	typedefs
inputModeMaster	memory.pde	/^  int inputModeMaster = inputModeLimit[0];$/;"	typedefs
inputModeMasterDown	memory.pde	/^        void inputModeMasterDown() {$/;"	m
inputModeMasterUp	memory.pde	/^        void inputModeMasterUp() {$/;"	m
inputModeUp	memory.pde	/^        void inputModeUp() {$/;"	m	class:chase
inputSelected	file.pde	/^void inputSelected(File selection) {   $/;"	m
intController	settings.pde	/^  IntSettingController intController;$/;"	f	class:SettingController
invokeFixturesDraw	fixture.pde	/^void invokeFixturesDraw() {$/;"	m
isAbout	functions.pde	/^boolean isAbout(float a, float b, int accu) {$/;"	m
isAbout	functions.pde	/^boolean isAbout(int a, int b) {$/;"	m
isAbout	functions.pde	/^boolean isAbout(int a, int b, int accu) {$/;"	m
isCaptured	hover.pde	/^  boolean isCaptured(HoverableElement elm) {$/;"	m	class:Mouse
isCaptured	hover.pde	/^  boolean isCaptured(String name) {$/;"	m	class:Mouse
isClicked	functions.pde	/^boolean isClicked(int x1, int y1, int x2, int y2) {$/;"	m
isCompleted	fade.pde	/^  boolean  isCompleted() {$/;"	m	class:Fade
isDrawn	fixture.pde	/^  boolean isDrawn;$/;"	f	class:fixtureSize
isHalogen	fixture.pde	/^  boolean isHalogen() {$/;"	m	class:fixture
isHover	functions.pde	/^boolean isHover(int offsetX, int offsetY, int w, int h) {$/;"	m
isHoverAB	functions.pde	/^boolean isHoverAB(int obj1X, int obj1Y, int obj2X, int obj2Y) {$/;"	m
isHoverAB	functions.pde	/^boolean isHoverAB(int obj1X, int obj1Y, int obj2X, int obj2Y, float moX, float moY, PGraphics g){$/;"	m
isHoverBottomMenu	functions.pde	/^boolean isHoverBottomMenu() {$/;"	m
isHoverSimple	functions.pde	/^boolean isHoverSimple(int ofX, int ofY, int w, int h, PGraphics g, Mouse mouse) {$/;"	m
isHoverSimple	functions.pde	/^boolean isHoverSimple(int offsetX, int offsetY, int w, int h) {$/;"	m
isHoverSimple	functions.pde	/^boolean isHoverSimple(int offsetX, int offsetY, int w, int h, int moX, int moY, PGraphics g){$/;"	m
isHovered	hover.pde	/^  boolean isHovered;  \/\/Is element selected as the one to be hovered (not direct indication of capture)$/;"	f	class:HoverableElement
isInList	functions.pde	/^boolean isInList(int i, int[] list) {$/;"	m
isMouseOver	Rmenu.pde	/^  boolean isMouseOver() {$/;"	m	class:MemoryCreationBox
isOnTop	hover.pde	/^  boolean isOnTop;$/;"	f	class:HoverableElement
isOpen	GUI.pde	/^  boolean isOpen() {$/;"	m	class:SubWindowContainer
isQuickChase	memory.pde	/^  boolean isQuickChase() {$/;"	m	class:chase
isReady	Wash.pde	/^  boolean isReady() { return ready; }$/;"	m	class:colorWash
kFresu	f3D.pde	/^PShape kFresu;$/;"	f	class:secondApplet1
kFresuConeDiameter	f3D.pde	/^float kFresuConeDiameter = 0.8;$/;"	f	class:secondApplet1
kalvo	functions.pde	/^void kalvo(color c) {$/;"	m
kerroin	memory.pde	/^  int kerroin = 2;$/;"	f	class:sine
keyPressed	cp5.pde	/^  void keyPressed() {$/;"	m	class:ControlFrame
keyPressed	f3D.pde	/^void keyPressed()$/;"	m	class:secondApplet1
keyPressed	functions.pde	/^void keyPressed() {$/;"	m
keyPressed	text.pde	/^  void keyPressed() {$/;"	m	class:secondApplet
keyReleased	functions.pde	/^void keyReleased() {$/;"	m
korkeus	setupp.pde	/^public int korkeus;$/;"	typedefs
lampToMove	DMX_Controller.pde	/^int lampToMove;$/;"	typedefs
lastLMBc	hover.pde	/^long lastLMBc = 0;$/;"	typedefs
lastRMBc	hover.pde	/^long lastRMBc = 0;$/;"	typedefs
lastStepDirection	DMX_Controller.pde	/^int lastStepDirection;$/;"	typedefs
lastVal	DMX_Controller.pde	/^float[] lastVal;$/;"	typedefs
lastY	DMX_Controller.pde	/^float[] lastY;$/;"	typedefs
lava	f3D.pde	/^boolean lava = false;$/;"	f	class:secondApplet1
lavaH	f3D.pde	/^int lavaX = 460, lavaY = 250, lavaSizX = 1000, lavaSizY = 500, lavaH = 100;$/;"	f	class:secondApplet1
lavaSizX	f3D.pde	/^int lavaX = 460, lavaY = 250, lavaSizX = 1000, lavaSizY = 500, lavaH = 100;$/;"	f	class:secondApplet1
lavaSizY	f3D.pde	/^int lavaX = 460, lavaY = 250, lavaSizX = 1000, lavaSizY = 500, lavaH = 100;$/;"	f	class:secondApplet1
lavaX	f3D.pde	/^int lavaX = 460, lavaY = 250, lavaSizX = 1000, lavaSizY = 500, lavaH = 100;$/;"	f	class:secondApplet1
lavaY	f3D.pde	/^int lavaX = 460, lavaY = 250, lavaSizX = 1000, lavaSizY = 500, lavaH = 100;$/;"	f	class:secondApplet1
lb	cp5.pde	/^  DropdownList lb;$/;"	f	class:ControlFrame
leveys	setupp.pde	/^public int leveys;$/;"	typedefs
linssi	f3D.pde	/^PShape linssi;$/;"	f	class:secondApplet1
linssiConeDiameter	f3D.pde	/^float linssiConeDiameter = 0.8;$/;"	f	class:secondApplet1
loadAllData	load.pde	/^void loadAllData() {$/;"	m
loadAllData1	load.pde	/^void loadAllData1() {$/;"	m
loadCoreData	file.pde	/^void loadCoreData() {$/;"	m
loadCoreDataMainFunction	file.pde	/^String loadCoreDataMainFunction(String variableName) {$/;"	m
loadFixtureMemory	memory.pde	/^void loadFixtureMemory(int number, int value) {$/;"	m
loadPath	DMX_Controller.pde	/^String loadPath = "";$/;"	typedefs
loadPreset	cp5.pde	/^  void loadPreset(int id) {$/;"	m	class:ControlFrame
loadPreset	memory.pde	/^  void loadPreset() {$/;"	m	class:memory
loadPreset	memory.pde	/^  void loadPreset(int num, int val) {$/;"	m	class:chase
loadPreset	memory.pde	/^  void loadPreset(int v) {$/;"	m	class:memory
loadPresets	cp5.pde	/^  void loadPresets() {$/;"	m	class:ControlFrame
loadSetupData	load.pde	/^void loadSetupData() {$/;"	m
loc	memory.pde	/^  int[] loc;$/;"	f	class:sine
locX	GUI.pde	/^  int locX, locY;$/;"	f	class:Switch
locX	Lmenu.pde	/^  int locX, locY;$/;"	f	class:LowerMenu
locX	Rmenu.pde	/^  int locX;$/;"	f	class:MemoryCreationBox
locX	settings.pde	/^  int locX, locY;$/;"	f	class:SettingsWindow
locY	GUI.pde	/^  int locX, locY;$/;"	f	class:Switch
locY	Lmenu.pde	/^  int locX, locY;$/;"	f	class:LowerMenu
locY	Rmenu.pde	/^  int locY;$/;"	f	class:MemoryCreationBox
locY	settings.pde	/^  int locX, locY;$/;"	f	class:SettingsWindow
locationOnScreenX	fixture.pde	/^  int locationOnScreenX, locationOnScreenY;$/;"	f	class:fixture
locationOnScreenY	fixture.pde	/^  int locationOnScreenX, locationOnScreenY;$/;"	f	class:fixture
loopMap	memory.pde	/^  int loopMap(int val, int in_lo, int in_hi, int out_hi, int offset) {$/;"	m	class:chase
lowerMenu	Lmenu.pde	/^LowerMenu lowerMenu = new LowerMenu();$/;"	typedefs
magenta	Wash.pde	/^  float cyan, magenta, yellow, black;$/;"	f	class:CMYK_Colour
makeColorArrays	Wash.pde	/^  void makeColorArrays() {$/;"	m	class:colorWash
makePresetsArray	memory.pde	/^  void makePresetsArray() {$/;"	m	class:chase
maschineControllerChange	midi.pde	/^void maschineControllerChange(int number, int value) {$/;"	m
maschineKnobRotated	midi.pde	/^void maschineKnobRotated(boolean positive) {$/;"	m
maschineKnobVal	midi.pde	/^int maschineKnobVal = 0;$/;"	typedefs
maschineNote	midi.pde	/^void maschineNote(int pitch, int velocity) {$/;"	m
masterValueBeforeBlackout	inOSC.pde	/^int masterValueBeforeBlackout;$/;"	typedefs
masterize	fixture.pde	/^  int masterize(int val) {$/;"	m	class:fixture
max	memory.pde	/^  float[] max = new float[getFreqMax()];$/;"	f	class:soundDetect
max	settings.pde	/^  int min, max;$/;"	f	class:IntSettingController
maxi	cp5.pde	/^        int maxi = 0;$/;"	f	class:ControlFrame
me	memory.pde	/^  int me;$/;"	f	class:sine
memories	memory.pde	/^  memory[] memories = new memory[1000];$/;"	typedefs
memory	DMX_Controller.pde	/^int[][] memory = new int[numberOfMemories][512]; \/\/Memory [numero][fixtuurin arvo]$/;"	typedefs
memory	memory.pde	/^  memory() {$/;"	m	class:memory
memory	memory.pde	/^class memory { \/\/Begin of memory class--------------------------------------------------------------------------------------------------------------------------------------$/;"	c
memoryControllerLookupTable	Rmenu.pde	/^int[] memoryControllerLookupTable = newIncrementingIntArray(numberOfMemories, 0);$/;"	typedefs
memoryCreator	Rmenu.pde	/^MemoryCreationBox memoryCreator;$/;"	typedefs
memoryData	DMX_Controller.pde	/^int[] memoryData;$/;"	typedefs
memoryMasterValue	DMX_Controller.pde	/^int memoryMasterValue = 255; \/\/Memorien master-muuttuja$/;"	typedefs
memoryMenu	DMX_Controller.pde	/^int memoryMenu = 0; \/\/Memorymenu offset$/;"	typedefs
memoryType	DMX_Controller.pde	/^int[] memoryType = new int[1000]; \/\/Memoryn tyyppi (1 = preset, 2 = sound to light)$/;"	typedefs
memoryValue	DMX_Controller.pde	/^int[] memoryValue = new int[numberOfMemories]; \/\/Tämänhetkinen memoryn arvo$/;"	typedefs
messageEndTime	Lmenu.pde	/^  long messageEndTime;$/;"	f	class:Notifier
messageIsCritical	Lmenu.pde	/^  boolean messageIsCritical;$/;"	f	class:Notifier
mhBase	f3D.pde	/^PShape mhBase;$/;"	f	class:secondApplet1
mhHolder	f3D.pde	/^PShape mhHolder;$/;"	f	class:secondApplet1
mhMain	f3D.pde	/^PShape mhMain;$/;"	f	class:secondApplet1
mhx50_RGB_color_Values	DMX_Controller.pde	/^int[][] mhx50_RGB_color_Values = { { 255, 255, 255 }, { 255, 255, 0 }, { 255, 100, 255 }, { 0, 100, 0 }, { 255, 0, 255 }, { 0, 0, 255 }, { 0, 255, 0 }, { 255, 30, 0 }, { 0, 0, 100 } };$/;"	typedefs
mhx50_autoProgram_values	DMX_Controller.pde	/^int[] mhx50_autoProgram_values = { 6, 22, 6, 38, 6, 54, 6, 70, 6, 86, 6, 102, 6, 118, 6, 134, 6, 150, 6, 166, 6, 182, 6, 198, 6, 214, 6, 230, 6, 247, 6, 254 };$/;"	typedefs
mhx50_color_names	DMX_Controller.pde	/^String[] mhx50_color_names = { "white", "yellow", "lightpink", "green", "darkpink", "lightblue", "lightgreen", "red", "blue" };$/;"	typedefs
mhx50_color_values	DMX_Controller.pde	/^int[] mhx50_color_values = { 5, 12, 19, 26, 33, 40, 47, 54, 62 }; \/\/white, yellow, lightpink, green, darkpink, lightblue, lightgreen, red, dark blue$/;"	typedefs
mhx50_createFinalChannelValues	DMX_Controller.pde	/^int[][] mhx50_createFinalChannelValues = new int[2][14];$/;"	typedefs
mhx50_createFinalPresetValues	DMX_Controller.pde	/^int[][][] mhx50_createFinalPresetValues = new int[16][2][14];$/;"	typedefs
mhx50_gobo_values	DMX_Controller.pde	/^int[] mhx50_gobo_values = { 6, 14, 22, 30, 38, 46, 54, 62 };$/;"	typedefs
mhxConeDiameter	f3D.pde	/^float mhxConeDiameter = 0.4;$/;"	f	class:secondApplet1
midiMessage	Draw.pde	/^void midiMessage(MidiMessage message) { \/\/ You can also use midiMessage(MidiMessage message, long timestamp, String bus_name)$/;"	m
midiNotesWithoutBlacks	Draw.pde	/^int[] midiNotesWithoutBlacks = { 1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10, 11, 11, 12, 12, 13, 13, 14, 15, 15, 16, 16, 17, 18, 18, 19, 19, 20, 20, 21, 22, 22, 23, 23, 24, 25, 25, 26, 26, 27, 27, 28, 29, 30, 31 };$/;"	typedefs
millisNow	DMX_Controller.pde	/^long[] millisNow = new long[100]; \/\/Nykyinen aika   --> Käytetään delayta sijaistavissa komennoissa$/;"	typedefs
millisOld	DMX_Controller.pde	/^long[] millisOld = new long[100]; \/\/Edellinen aika  --> Käytetään delayta sijaistavissa komennoissa$/;"	typedefs
min	settings.pde	/^  int min, max;$/;"	f	class:IntSettingController
mode	settings.pde	/^  int mode = 0; \/\/0: numbox, 1: slider, 2: knob$/;"	f	class:IntSettingController
mode	settings.pde	/^  int mode; \/\/0: switch, 1: numbox, 2: slider, 3: knob, 4: textbox, \/- 5: listbox-\/$/;"	f	class:SettingController
mouse	hover.pde	/^Mouse mouse = new Mouse();$/;"	typedefs
mouseDragged	f3D.pde	/^void mouseDragged() {$/;"	m	class:secondApplet1
mouseDragged	text.pde	/^  void mouseDragged() {$/;"	m	class:secondApplet
mouseLocker	DMX_Controller.pde	/^String mouseLocker; \/\/Mille alueelle hiiri on lukittu$/;"	typedefs
mousePressed	f3D.pde	/^void mousePressed() {$/;"	m	class:secondApplet1
mousePressed	functions.pde	/^void mousePressed() {$/;"	m
mouseReleased	functions.pde	/^void mouseReleased() {$/;"	m
mouseWheel	functions.pde	/^void mouseWheel(MouseEvent event) {$/;"	m
movePage	functions.pde	/^void movePage() {$/;"	m
movingHeadPan	DMX_Controller.pde	/^int movingHeadPan; \/\/Moving headin pan arvo$/;"	typedefs
movingHeadTilt	DMX_Controller.pde	/^int movingHeadTilt; \/\/Moving headin tilt arvo$/;"	typedefs
multiplyColor	functions.pde	/^color multiplyColor(color col, float mult) {$/;"	m
multixy1_value	inOSC.pde	/^int multixy1_value;$/;"	typedefs
multixy1_value_offset	inOSC.pde	/^int multixy1_value_offset;$/;"	typedefs
multixy1_value_old	inOSC.pde	/^int multixy1_value_old; $/;"	typedefs
myChase	memory.pde	/^  chase myChase;$/;"	f	class:memory
myPort	DMX_Controller.pde	/^Serial myPort;  \/\/ The serial port$/;"	typedefs
myRemoteLocation1	setupp.pde	/^NetAddress myRemoteLocation1;$/;"	typedefs
myRemoteLocation2	setupp.pde	/^NetAddress myRemoteLocation2;$/;"	typedefs
n	memory.pde	/^  int n = 0;$/;"	f	class:sine
name	Wash.pde	/^  String name;$/;"	f	class:colorName
name	hover.pde	/^  String name;        \/\/Identifier$/;"	f	class:HoverableElement
name	settings.pde	/^  String name;$/;"	f	class:SettingController
newChase	memory.pde	/^  void newChase() {$/;"	m	class:chase
newColorWash	Wash.pde	/^void newColorWash() {$/;"	m
newIncrementingIntArray	functions.pde	/^int[] newIncrementingIntArray(int length, int start) {$/;"	m
nextChaseMode	Umenu.pde	/^void nextChaseMode() {$/;"	m
noDisabledTypes	Wash.pde	/^  void noDisabledTypes() { disableByType = false; }$/;"	m	class:colorWash
noHalogens	Wash.pde	/^  void noHalogens() { useHalogens = false; }$/;"	m	class:colorWash
noLeds	Wash.pde	/^  void noLeds() { useLeds = false; }$/;"	m	class:colorWash
noteOff	Draw.pde	/^void noteOff(int channel, int pitch, int velocity) {$/;"	m
noteOn	Draw.pde	/^void noteOn(int channel, int pitch, int velocity) {$/;"	m
notifier	Lmenu.pde	/^Notifier notifier = new Notifier();$/;"	typedefs
notify	Lmenu.pde	/^  void notify(String message) {$/;"	m	class:Notifier
notify	Lmenu.pde	/^  void notify(String message, boolean critical) {$/;"	m	class:Notifier
notify	Lmenu.pde	/^  void notify(String message, long time, boolean critical) {$/;"	m	class:Notifier
numberOfAllChannelsFirstDimensions	DMX_in.pde	/^int numberOfAllChannelsFirstDimensions = 5; \/\/ allChannels[numberOfAllChannelsFirstDimensions][];$/;"	typedefs
numberOfAllFixtures	DMX_Controller.pde	/^int numberOfAllFixtures = 81;$/;"	typedefs
numberOfAnsas	f3D.pde	/^int numberOfAnsas = 6;$/;"	typedefs
numberOfMemories	DMX_Controller.pde	/^int numberOfMemories = 100; \/\/How much are there memories used in software$/;"	typedefs
objectUid	hover.pde	/^  AtomicInteger objectUid = new AtomicInteger();$/;"	f	class:Mouse
odd	Wash.pde	/^  boolean odd = true;$/;"	f	class:colorWash
odd	Wash.pde	/^  void odd() { odd = true; even = false; }$/;"	m	class:colorWash
oddAndEven	Wash.pde	/^  void oddAndEven() { odd = true; even = true; }$/;"	m	class:colorWash
oddEvenMode	Wash.pde	/^  int oddEvenMode = 1;$/;"	f	class:colorWash
oddEvenNext	Wash.pde	/^  void oddEvenNext() { $/;"	m	class:colorWash
offset	colPicker.pde	/^PVector offset = new PVector(0, 0);$/;"	f	class:HSBColorPicker
offset	text.pde	/^  PVector offset = new PVector(0, 0);$/;"	f	class:secondApplet
ofset	memory.pde	/^  float ofset = 0;$/;"	f	class:sine
oldChannelValToIpad	toOSC.pde	/^int[] oldChannelValToIpad = new int[channels];$/;"	typedefs
oldChannelValToPc	toOSC.pde	/^int[] oldChannelValToPc = new int[300];$/;"	typedefs
oldDataValToIpad	toOSC.pde	/^int[] oldDataValToIpad = new int[100];$/;"	typedefs
oldFixtureTypeId	fixture.pde	/^  int oldFixtureTypeId;$/;"	f	class:fixture
oldGo	Lmenu.pde	/^  boolean oldGo;$/;"	f	class:bottomMenuChController
oldGrandMaster	Draw.pde	/^int oldGrandMaster = 40;$/;"	typedefs
oldKnobVal	cp5.pde	/^  int oldKnobVal;$/;"	f	class:ControlFrame
oldMemoryValToIpad	toOSC.pde	/^int[] oldMemoryValToIpad = new int[numberOfMemories];$/;"	typedefs
oldMouseX	DMX_Controller.pde	/^int oldMouseX;$/;"	typedefs
oldMouseX1	Draw.pde	/^int oldMouseX1;$/;"	typedefs
oldMouseX2	Lmenu.pde	/^int oldMouseX2;$/;"	typedefs
oldMouseXtr	functions.pde	/^int oldMouseXtr = 0;$/;"	typedefs
oldMouseY	DMX_Controller.pde	/^int oldMouseY;$/;"	typedefs
oldMouseY1	Draw.pde	/^int oldMouseY1;$/;"	typedefs
oldMouseY2	Lmenu.pde	/^int oldMouseY2;$/;"	typedefs
oldMouseYtr	functions.pde	/^int oldMouseYtr = 0;$/;"	typedefs
oldValue	memory.pde	/^  int[] oldValue;$/;"	f	class:chase
oldValueBoolean	settings.pde	/^  boolean oldValueBoolean;$/;"	f	class:SettingController
oldValueInt	settings.pde	/^  int oldValueInt;$/;"	f	class:SettingController
onInit	settings.pde	/^  void onInit() {$/;"	m	class:SettingsWindow
onlyHalogens	Wash.pde	/^  void onlyHalogens() { useLeds = false; useHalogens = true; }$/;"	m	class:colorWash
onlyLeds	Wash.pde	/^  void onlyLeds() { useLeds = true; useHalogens = false; }$/;"	m	class:colorWash
onlyList	Wash.pde	/^  boolean onlyList = false;$/;"	f	class:colorWash
onlyPositive	functions.pde	/^    float onlyPositive(float val) {$/;"	m
onlyPositive	functions.pde	/^    int onlyPositive(int val) {$/;"	m
onlySelected	Wash.pde	/^  boolean onlySelected = false;$/;"	f	class:colorWash
ontopofName	GUI.pde	/^  String ontopofName;$/;"	f	class:Switch
open	GUI.pde	/^  boolean open;$/;"	f	class:contextMenu
open	Lmenu.pde	/^  boolean open;$/;"	f	class:LowerMenu
open	Rmenu.pde	/^  boolean open;$/;"	f	class:MemoryCreationBox
open	settings.pde	/^  boolean open;$/;"	f	class:SettingsWindow
open	settings.pde	/^  void open() {$/;"	m	class:SettingsWindow
openBottomMenuControlBox	Lmenu.pde	/^void openBottomMenuControlBox(int owner) {$/;"	m
openBottomMenuControlBoxForSelectedFs	Lmenu.pde	/^void openBottomMenuControlBoxForSelectedFs() {$/;"	m
openBottomMenuControlBoxFromContextMenu	Lmenu.pde	/^void openBottomMenuControlBoxFromContextMenu() {$/;"	m
options	GUI.pde	/^  contextMenuOption[] options;$/;"	f	class:contextMenu
originalValue	fade.pde	/^  int originalValue, targetValue, actualValue;$/;"	f	class:Fade
originalValue	memory.pde	/^  int[] originalValue;$/;"	f	class:chase
oscEvent	inOSC.pde	/^void oscEvent(OscMessage theOscMessage) {$/;"	m
oscP51	setupp.pde	/^OscP5 oscP51; $/;"	typedefs
oscP52	setupp.pde	/^OscP5 oscP52;$/;"	typedefs
out	fixture.pde	/^  FixtureDMX out;$/;"	f	class:fixture
output	memory.pde	/^        void output() {$/;"	m	class:chase
outputChannels	DMX_Controller.pde	/^int outputChannels = 80;                                                                                   \/\/|||$/;"	typedefs
outputMode	memory.pde	/^  int inputMode, outputMode, beatModeId; \/\/What is input and what will output look like$/;"	f	class:chase
outputModeDescs	memory.pde	/^  String[] outputModeDescs = { "inherit", "steps", "eq", "shaky", "sine", "sSine", "rainbow", "onoff" };$/;"	typedefs
outputModeDown	memory.pde	/^        void outputModeDown() {$/;"	m	class:chase
outputModeLimit	memory.pde	/^  int[] outputModeLimit = { 0, outputModeDescs.length-1 };$/;"	f	class:chase
outputModeLimit	memory.pde	/^  int[] outputModeLimit = { 1, outputModeDescs.length-1 };$/;"	typedefs
outputModeMaster	memory.pde	/^  int outputModeMaster = outputModeLimit[0];$/;"	typedefs
outputModeMasterDown	memory.pde	/^        void outputModeMasterDown() {$/;"	m
outputModeMasterUp	memory.pde	/^        void outputModeMasterUp() {$/;"	m
outputModeUp	memory.pde	/^        void outputModeUp() {$/;"	m	class:chase
outputSelected	file.pde	/^void outputSelected(File selection) {    $/;"	m
overZero	functions.pde	/^    float overZero(float val) {$/;"	m
overZero	functions.pde	/^    int overZero(int val) {$/;"	m
ownFade	memory.pde	/^  int fade, ownFade;$/;"	f	class:chase
pFresuConeDiameter	f3D.pde	/^float pFresuConeDiameter = 0.7;$/;"	f	class:secondApplet1
pageRotation	DMX_Controller.pde	/^int pageRotation = 0; \/\/How much is page rotated (0-360)$/;"	typedefs
pairless	Wash.pde	/^  boolean pairless;$/;"	f	class:colorWash
par64ConeDiameter	f3D.pde	/^float par64ConeDiameter = 0.4;$/;"	f	class:secondApplet1
par64Holder	f3D.pde	/^PShape par64Holder;$/;"	f	class:secondApplet1
par64Model	f3D.pde	/^PShape par64Model;$/;"	f	class:secondApplet1
parameter	fixture.pde	/^  int parameter;$/;"	f	class:fixture
parent	GUI.pde	/^  PApplet parent;$/;"	f	class:contextMenu
parent	cp5.pde	/^  Object parent;$/;"	f	class:ControlFrame
parent	f3D.pde	/^  PApplet parent;$/;"	f	class:secondApplet1
parent	fixtureDMX.pde	/^  fixture parent;$/;"	f	class:FixtureDMX
parent	memory.pde	/^  chase parent;$/;"	f	class:sine
parent	memory.pde	/^  memory parent;$/;"	f	class:chase
parentAnsa	fixture.pde	/^  int parentAnsa;$/;"	f	class:fixture
parentContainer	settings.pde	/^  SettingController parentContainer;$/;"	f	class:IntSettingController
parentContainer	settings.pde	/^  SettingController parentContainer;$/;"	f	class:StringSettingController
parentTab	settings.pde	/^  SettingsTab parentTab;$/;"	f	class:SettingController
parentWindow	settings.pde	/^  SettingsWindow parentWindow;$/;"	f	class:SettingsTab
portOutgoing	DMX_Controller.pde	/^int portOutgoing = 9000;                                    \/\/|$/;"	typedefs
postFade	fade.pde	/^  int preFade, postFade;$/;"	f	class:Fade
postFadeSpeed	fixture.pde	/^  int postFadeSpeed = 5000;$/;"	f	class:fixture
preFade	fade.pde	/^  int preFade, postFade;$/;"	f	class:Fade
preFadeSpeed	fixture.pde	/^  int preFadeSpeed = 1000;$/;"	f	class:fixture
preRow	cp5.pde	/^  int preRow;$/;"	f	class:ControlFrame
preset	DMX_Controller.pde	/^int[][] preset = new int[numberOfMemories][512]; \/\/Preset [numero][fixtuurin arvo]$/;"	typedefs
preset	fixture.pde	/^  FixtureDMX preset;$/;"	f	class:fixture
preset	memory.pde	/^  void preset() {$/;"	m	class:memory
presetProcess	fixtureDMX.pde	/^  void presetProcess() {$/;"	m	class:FixtureDMX
presetTypingCurrent	cp5.pde	/^  int presetTypingCurrent = 0;$/;"	f	class:ControlFrame
presetTypingDelay	cp5.pde	/^  int presetTypingDelay = 10;$/;"	f	class:ControlFrame
presetValue	DMX_Controller.pde	/^int[] presetValue = new int[numberOfMemories]; \/\/Tämänhetkinen presetin arvo$/;"	typedefs
presetValueOld	DMX_Controller.pde	/^int[] presetValueOld = new int[numberOfMemories]; \/\/Tämänhetkinen presetin arvo$/;"	typedefs
presets	cp5.pde	/^  XML presets;$/;"	f	class:ControlFrame
presets	memory.pde	/^  int[] presets; \/\/all the presets in chase$/;"	f	class:chase
pressedButton1	cp5.pde	/^  int pressedButton1 = 0;$/;"	f	class:ControlFrame
pressedButton2	cp5.pde	/^  int pressedButton2 = 0;$/;"	f	class:ControlFrame
priority	hover.pde	/^  int priority;       \/\/priority$/;"	f	class:HoverableElement
process	fixture.pde	/^  FixtureDMX process;$/;"	f	class:fixture
processDMXvalues	fixture.pde	/^  void processDMXvalues() {$/;"	m	class:fixture
processFade	fixture.pde	/^  void processFade() {$/;"	m	class:fixture
profile	Lmenu.pde	/^  int profile = 0;$/;"	f	class:bottomMenuChController
push	GUI.pde	/^  void push() {$/;"	m	class:CursorHandler
push	fixture.pde	/^  void push(boolean down) {$/;"	m	class:fixture
push	memory.pde	/^  void push(boolean down) {$/;"	m	class:memory
pushWithMemory	memory.pde	/^  void pushWithMemory(boolean down) {$/;"	m	class:memory
putOnTop	GUI.pde	/^  void putOnTop(int i) {$/;"	m	class:SubWindowHandler
quickSlider	functions.pde	/^int quickSlider(String mouseLockID, int mousePriority, int value, PGraphics g, Mouse mouse) {$/;"	m
rBlue	functions.pde	/^int rBlue(color c) {$/;"	m
rGreen	functions.pde	/^int rGreen(color c) {$/;"	m
rMap	functions.pde	/^    int rMap(int val, int in_low, int in_hi, int out_low, int out_hi) {$/;"	m
rRed	functions.pde	/^int rRed(color c) {$/;"	m
rainbow	memory.pde	/^  void rainbow() {$/;"	m	class:chase
reachedTarget	cp5.pde	/^  boolean reachedTarget = true;$/;"	f	class:ControlFrame
ready	Wash.pde	/^  boolean ready = true;$/;"	f	class:colorWash
ready	memory.pde	/^  boolean ready;$/;"	f	class:sine
receiveDMX	fixture.pde	/^  boolean receiveDMX(int[] dmxChannels) {$/;"	m	class:fixture
receiveDMX	fixtureDMX.pde	/^  boolean receiveDMX(int[] dmxChannels) {$/;"	m	class:FixtureDMX
receiveDMXtoUniversal	profiles.pde	/^int[] receiveDMXtoUniversal(int fT, int[] dmxChannels) {$/;"	m
red	Wash.pde	/^  int red, green, blue, white, dim;$/;"	f	class:colorName
red	Wash.pde	/^  int red, green, blue, white, dim;$/;"	f	class:colorWash
red	Wash.pde	/^  int red, green, blue, white;$/;"	f	class:Color
red	fixture.pde	/^  int red, green, blue; \/\/color values$/;"	f	class:fixture
reflectionCapable	GUI.pde	/^  boolean reflectionCapable = true;$/;"	f	class:SubWindowContainer
refresh	hover.pde	/^  void refresh() {$/;"	m	class:Mouse
refresh	hover.pde	/^  void refresh(float mouseX, float mouseY, PGraphics g) {$/;"	m	class:Mouse
refreshAnsas	cp5.pde	/^  void refreshAnsas() {$/;"	m	class:ControlFrame
refreshBridged	hover.pde	/^  void refreshBridged(PGraphics g) {$/;"	m	class:Mouse
refreshBridged	hover.pde	/^  void refreshBridged(int newX, int newY, int newW, int newH, PGraphics g) {$/;"	m	class:Mouse
registerTempoTapTap	midi.pde	/^void registerTempoTapTap() {$/;"	m
remoteIP	DMX_Controller.pde	/^String remoteIP = "192.168.0.12"; \/\/iPadin ip-osoite        \/\/|$/;"	typedefs
remove	fixture.pde	/^  void remove(int id) {$/;"	m	class:FixtureArray
removeAllSelectedFixtures	fixture.pde	/^void removeAllSelectedFixtures() {$/;"	m
removeElement	hover.pde	/^  boolean removeElement(String name) {$/;"	m	class:Mouse
removeFixtureFromCM	fixture.pde	/^void removeFixtureFromCM() {$/;"	m
reorderMemoryController	Rmenu.pde	/^void reorderMemoryController(int from, int to) {$/;"	m
repOfFixtures	memory.pde	/^  FixtureDMX[] repOfFixtures = new FixtureDMX[fixtures.size()];$/;"	f	class:memory
reverseChaseMode	Umenu.pde	/^void reverseChaseMode() {$/;"	m
rgb	Wash.pde	/^  int[] rgb = new int[3];$/;"	f	class:colorWash
rgbw	Wash.pde	/^  int[] rgbw = new int[4];$/;"	f	class:colorWash
rgbwd	Wash.pde	/^  int[] rgbwd = new int[5];$/;"	f	class:colorWash
rotationX	fixture.pde	/^  int rotationX, rotationZ;$/;"	f	class:fixture
rotationZ	fixture.pde	/^  int rotationX, rotationZ;$/;"	f	class:fixture
s	DMX_Controller.pde	/^secondApplet s;$/;"	typedefs
s1	DMX_Controller.pde	/^secondApplet1 s1;$/;"	typedefs
s2l	memory.pde	/^  soundDetect s2l;$/;"	typedefs
sample_rate	DMX_Controller.pde	/^float sample_rate = 44100;                                                      \/\/|$/;"	typedefs
saturation	colPicker.pde	/^int saturation = 255*2;$/;"	f	class:HSBColorPicker
save	Rmenu.pde	/^  void save() {$/;"	m	class:MemoryCreationBox
save1Darray	save.pde	/^void save1Darray(int[] array, String arrayName) {$/;"	m
save1DarrayString	save.pde	/^void save1DarrayString(String[] array, String arrayName) {$/;"	m
save2Darray	save.pde	/^void save2Darray(int[][] array, String arrayName) {$/;"	m
save2DarrayBoolean	save.pde	/^void save2DarrayBoolean(boolean[][] array, String arrayName) {$/;"	m
saveAllData	save.pde	/^void saveAllData() {$/;"	m
saveCoreData	file.pde	/^void saveCoreData() {$/;"	m
saveCoreDataMainFunction	file.pde	/^void saveCoreDataMainFunction(String variableName, String variable) {$/;"	m
saveDataBYPASSZERO	save.pde	/^void saveDataBYPASSZERO(String variable, String variableName, String dimensions, String D1, String D2) {$/;"	m
saveDataMainCommands	save.pde	/^void saveDataMainCommands(String variable, String variableName, String dimensions, String D1, String D2) {$/;"	m
saveOptionButtonVariables	input.pde	/^String[] saveOptionButtonVariables = { "dimmer", "red", "green", "blue", "white", "amber", "pan", "tilt", "panFine", "tiltFine", $/;"	typedefs
savePath	DMX_Controller.pde	/^String savePath = "";$/;"	typedefs
savePreset	memory.pde	/^  void savePreset(boolean[] newWhatToSave) {$/;"	m	class:memory
savePresets	cp5.pde	/^  void savePresets() {$/;"	m	class:ControlFrame
saveVariable	save.pde	/^void saveVariable(int variable, String variableName) {$/;"	m
scrollStatus	Lmenu.pde	/^  float scrollStatus = 0;$/;"	f	class:LowerMenu
scrollStatus	settings.pde	/^  float scrollStatus = 0;$/;"	f	class:SettingsTab
scrollStatusTrg	Lmenu.pde	/^  float scrollStatusTrg = 0;$/;"	f	class:LowerMenu
scrollStatusTrg	settings.pde	/^  float scrollStatusTrg = 0;$/;"	f	class:SettingsTab
secondApplet	text.pde	/^public class secondApplet extends PApplet {$/;"	c
secondApplet1	f3D.pde	/^  secondApplet1(PApplet parent) {$/;"	m	class:secondApplet1
secondApplet1	f3D.pde	/^public class secondApplet1 extends PApplet {$/;"	c
selectMaschinePad	midi.pde	/^void selectMaschinePad(int padId, boolean putOn) {$/;"	m
selected	fixture.pde	/^  boolean selected = false;$/;"	f	class:fixture
selectedFixtures	Wash.pde	/^  int[] selectedFixtures;$/;"	f	class:colorWash
selectedMemoryMode	Rmenu.pde	/^  int selectedMemoryMode = 0;$/;"	f	class:MemoryCreationBox
selectedMemorySlot	Rmenu.pde	/^  int selectedMemorySlot = 1;$/;"	f	class:MemoryCreationBox
selectedTab	settings.pde	/^  int selectedTab = 0;$/;"	f	class:SettingsWindow
selectedWhatToSave	Rmenu.pde	/^  boolean[] selectedWhatToSave;$/;"	f	class:MemoryCreationBox
sendDataToIpad	toOSC.pde	/^void sendDataToIpad(String ch, int val) {$/;"	m
sendDataToIpadAsString	toOSC.pde	/^void sendDataToIpadAsString(String ch, String val) {$/;"	m
sendMemoryToIpad	toOSC.pde	/^void sendMemoryToIpad(int ch, int val) {$/;"	m
sendOscToAnotherPc	toOSC.pde	/^void sendOscToAnotherPc(int ch, int val) {$/;"	m
sendOscToIpad	toOSC.pde	/^void sendOscToIpad(int ch, int val) {$/;"	m
set	GUI.pde	/^  void set(int cur) {$/;"	m	class:CursorHandler
setAccuracy	Wash.pde	/^  void setAccuracy(int a) { accuracy = a; }$/;"	m	class:colorWash
setAllowedChannels	DMX_Controller.pde	/^void setAllowedChannels() {$/;"	m
setBeatMode	memory.pde	/^        void setBeatMode(String bM) {                                                          $/;"	m	class:chase
setBeatModeId	memory.pde	/^        void setBeatModeId(int bM) {                                                           $/;"	m	class:chase
setColor	Wash.pde	/^  void setColor(String colour) {$/;"	m	class:colorWash
setColor	fixture.pde	/^  void setColor(int c) {$/;"	m	class:fixture
setColor	memory.pde	/^  void setColor(int i, color c) {$/;"	m	class:chase
setColorForLed	fixture.pde	/^  void setColorForLed(int c) {$/;"	m	class:fixture
setColorForLedFromPreset	fixture.pde	/^  void setColorForLedFromPreset(int c) {$/;"	m	class:fixture
setColorNumber	fixture.pde	/^  void setColorNumber(int value) { $/;"	m	class:fixture
setColorToHalogens	Wash.pde	/^  void setColorToHalogens(int val) { \/\/Put halogens on if they are right-colored$/;"	m	class:colorWash
setColorToLeds	Wash.pde	/^  void setColorToLeds(int val) { \/\/Set right colors to leds$/;"	m	class:colorWash
setColorValuesFromDmxValue	fixture.pde	/^   void setColorValuesFromDmxValue(int a) {$/;"	m	class:fixture
setControllers	settings.pde	/^  void setControllers(SettingController[] newControllers) {$/;"	m	class:SettingsTab
setDimAndMemoryValuesAtEveryDraw	DMX_proc.pde	/^void setDimAndMemoryValuesAtEveryDraw() {$/;"	m
setDimmer	fixture.pde	/^  void setDimmer(int val) { $/;"	m	class:fixture
setDimmer	fixtureDMX.pde	/^  void setDimmer(int val) {$/;"	m	class:FixtureDMX
setDisabledTypes	Wash.pde	/^  void setDisabledTypes(int[] list) { disabledTypes = new int[list.length]; arrayCopy(list, disabledTypes); }$/;"	m	class:colorWash
setDmxChannel	DMX_Controller.pde	/^void setDmxChannel(int channel, int value) {                                                                            \/\/|$/;"	m
setElementExpire	hover.pde	/^  boolean setElementExpire(String name, int newExpire) {$/;"	m	class:Mouse
setExternalBoValue	settings.pde	/^  void setExternalBoValue(boolean b, int var) {$/;"	m	class:SettingsWindow
setExternalInValue	settings.pde	/^  void setExternalInValue(int v, int var) {$/;"	m	class:SettingsWindow
setFade	memory.pde	/^        void setFade() {$/;"	m	class:chase
setFixtureChannelsAtSoftwareBegin	DMX_Controller.pde	/^void setFixtureChannelsAtSoftwareBegin() {$/;"	m
setGrandMaster	memory.pde	/^  void setGrandMaster(int value) {$/;"	m	class:memory
setHsb	Wash.pde	/^  void setHsb(int h, int s, int b) {$/;"	m	class:colorWash
setList	Wash.pde	/^  void setList(int[] list) { selectedFixtures = new int[list.length]; arrayCopy(list, selectedFixtures); }$/;"	m	class:colorWash
setMaschineStepDirection	midi.pde	/^void setMaschineStepDirection(boolean direction) {$/;"	m
setOwnerValue	Lmenu.pde	/^  void setOwnerValue() {$/;"	m	class:bottomMenuChController
setParentType	memory.pde	/^  void setParentType(int t) {$/;"	m	class:chase
setPriority	GUI.pde	/^  void setPriority(int newPriority, SubWindowContainer sw) {$/;"	m	class:SubWindowHandler
setRgb	Wash.pde	/^  void setRgb(int r, int g, int b) {$/;"	m	class:colorWash
setRgb	Wash.pde	/^  void setRgb(int[] c) {$/;"	m	class:colorWash
setRgbw	Wash.pde	/^  void setRgbw(int r, int g, int b, int w) {$/;"	m	class:colorWash
setRgbw	Wash.pde	/^  void setRgbw(int[] c) {$/;"	m	class:colorWash
setRgbwd	Wash.pde	/^  void setRgbwd(int r, int g, int b, int w, int d) {$/;"	m	class:colorWash
setRgbwd	Wash.pde	/^  void setRgbwd(int[] c) {$/;"	m	class:colorWash
setState	settings.pde	/^  void setState(int newState) {$/;"	m	class:IntSettingController
setUniDMX	fixtureDMX.pde	/^  void setUniDMX(int i, int val) { setUniversalDMX(i, val); }$/;"	m	class:FixtureDMX
setUniDMX	fixtureDMX.pde	/^  void setUniDMX(int[] vals) { setUniversalDMX(vals); }$/;"	m	class:FixtureDMX
setUniDMXfromPreset	fixtureDMX.pde	/^  void setUniDMXfromPreset(int i, int val) {$/;"	m	class:FixtureDMX
setUniversalDMX	fixtureDMX.pde	/^  void setUniversalDMX(int i, int val) {$/;"	m	class:FixtureDMX
setUniversalDMX	fixtureDMX.pde	/^  void setUniversalDMX(int[] vals) {$/;"	m	class:FixtureDMX
setUniversalDMXwithFade	fixture.pde	/^  void setUniversalDMXwithFade(int i, int val) {$/;"	m	class:fixture
setValue	memory.pde	/^  void setValue() {$/;"	m	class:chase
setValue	memory.pde	/^  void setValue(int val) {$/;"	m	class:memory
setValuesToSelected	functions.pde	/^void setValuesToSelected() {$/;"	m
settingsIcon	Umenu.pde	/^PShape settingsIcon;$/;"	typedefs
settingsWindow	settings.pde	/^SettingsWindow settingsWindow = new SettingsWindow(false);$/;"	typedefs
setup	DMX_Controller.pde	/^void setup() {$/;"	m
setup	cp5.pde	/^  public void setup() {$/;"	m	class:ControlFrame
setup	f3D.pde	/^void setup() {$/;"	m	class:secondApplet1
setup	text.pde	/^  public void setup() {$/;"	m	class:secondApplet
setuppi	setupp.pde	/^void setuppi() {$/;"	m
shake	memory.pde	/^  void shake() {$/;"	m	class:chase
shake1	memory.pde	/^  void shake1() { \/\/function to shake fixture values near the original value$/;"	m	class:chase
showBrightness	colPicker.pde	/^  void showBrightness() {$/;"	m	class:HSBColorPicker
showColorSelector	colPicker.pde	/^  void showColorSelector() {$/;"	m	class:HSBColorPicker
showHue	colPicker.pde	/^  void showHue() {$/;"	m	class:HSBColorPicker
showSaturation	colPicker.pde	/^  void showSaturation() {$/;"	m	class:HSBColorPicker
showingMessage	Lmenu.pde	/^  boolean showingMessage = false;$/;"	f	class:Notifier
sinStep	memory.pde	/^  float sinStep = 0; \/\/step of sine wave$/;"	f	class:chase
sine	memory.pde	/^  sine(int num, chase parent) {$/;"	m	class:sine
sine	memory.pde	/^  void sine() { \/\/function to make sine waves to presets$/;"	m	class:chase
sine	memory.pde	/^class sine {$/;"	c
sineMax	memory.pde	/^  int sineMax = 300;$/;"	f	class:chase
sineMin	memory.pde	/^  int sineMin = 1;$/;"	f	class:chase
sineValue	memory.pde	/^  int[] sineValue = new int[500];$/;"	f	class:chase
sines	memory.pde	/^  sine[] sines = new sine[sineMax+1];$/;"	f	class:chase
singleSine	memory.pde	/^  void singleSine() { \/\/The function which makes ONE sine wave always when trigger is true$/;"	m	class:chase
sivuValikko	Rmenu.pde	/^void sivuValikko() {$/;"	m
size	fixture.pde	/^  fixtureSize size;$/;"	f	class:fixture
size	fixture.pde	/^  int size() {$/;"	m	class:FixtureArray
size	profiles.pde	/^  fixtureSize size;$/;"	f	class:FixtureProfile
size	settings.pde	/^  final int size = 500;$/;"	f	class:SettingsWindow
slider	Lmenu.pde	/^  void slider() {$/;"	m	class:bottomMenuChController
soloMemory	DMX_Controller.pde	/^int soloMemory = 11; \/\/Memorypaikka, joka on solo - solomemory's memoryplace$/;"	typedefs
song	DMX_Controller.pde	/^AudioPlayer song;                                                               \/\/|                             $/;"	typedefs
sortIndex	functions.pde	/^  int[] sortIndex(int[] toSort) {$/;"	m
soundDetect	memory.pde	/^  soundDetect() {$/;"	m	class:soundDetect
soundDetect	memory.pde	/^class soundDetect { \/\/----------------------------------------------------------------------------------------------------------------------------------------------------------$/;"	c
soundToLightNumero	DMX_Controller.pde	/^int soundToLightNumero = 1; \/\/Sound to lightin järjestysnumero (EI KÄYTÖSSÄ)$/;"	typedefs
soundToLightPresets	DMX_Controller.pde	/^int[][] soundToLightPresets = new int[numberOfMemories][numberOfMemories];$/;"	typedefs
soundToLightSteps	DMX_Controller.pde	/^int[] soundToLightSteps = new int[numberOfMemories];$/;"	typedefs
startFade	fade.pde	/^  void startFade(int from, int to, int pre, int post) {$/;"	m	class:Fade
startMillis	fade.pde	/^  long startMillis;$/;"	f	class:Fade
started	cp5.pde	/^  boolean started = false;$/;"	f	class:ControlFrame
state	GUI.pde	/^  boolean state;$/;"	f	class:Switch
state	settings.pde	/^  int state;$/;"	f	class:IntSettingController
step	memory.pde	/^  int step, brightness, brightness1;$/;"	f	class:chase
stepHasChanged	memory.pde	/^  boolean stepHasChanged;$/;"	f	class:chase
strController	settings.pde	/^  StringSettingController strController;$/;"	f	class:SettingController
strobo	f3D.pde	/^PShape strobo;$/;"	f	class:secondApplet1
stroboConeDiameter	f3D.pde	/^float stroboConeDiameter = 0.8;$/;"	f	class:secondApplet1
stroboOn	f3D.pde	/^boolean[] stroboOn;$/;"	f	class:secondApplet1
subWindowHandler	GUI.pde	/^SubWindowHandler subWindowHandler;$/;"	typedefs
subWindows	GUI.pde	/^  ArrayList<SubWindowContainer> subWindows;$/;"	f	class:SubWindowHandler
submitDMXFromBMCB	Lmenu.pde	/^void submitDMXFromBMCB(int[] input) {$/;"	m
successLoad	cp5.pde	/^  boolean successLoad = false;$/;"	f	class:ControlFrame
swBuffer	GUI.pde	/^  PGraphics swBuffer;$/;"	f	class:SubWindowContainer
swMouse	GUI.pde	/^  Mouse swMouse;$/;"	f	class:SubWindowContainer
table	f3D.pde	/^PShape table;$/;"	f	class:secondApplet1
table	save.pde	/^Table table; $/;"	typedefs
tablePositionsLength	f3D.pde	/^int[] tablePositionsLength = new int[3];$/;"	typedefs
tablex	f3D.pde	/^int[] tablex = {  };$/;"	typedefs
tabley	f3D.pde	/^int[] tabley = {  };$/;"	typedefs
tablez	f3D.pde	/^int[] tablez = {  };$/;"	typedefs
tabs	settings.pde	/^  SettingsTab[] tabs;$/;"	f	class:SettingsWindow
tapStartMillis	midi.pde	/^int tapStartMillis;$/;"	typedefs
targetDim	cp5.pde	/^  int[] targetDim = new int[13]; \/\/ 0 = master$/;"	f	class:ControlFrame
targetFrom	cp5.pde	/^  int[] targetFrom = new int[13];$/;"	f	class:ControlFrame
targetStep	cp5.pde	/^  int targetStep = 0;$/;"	f	class:ControlFrame
targetValue	fade.pde	/^  int originalValue, targetValue, actualValue;$/;"	f	class:Fade
tempotapTapCount	midi.pde	/^int tempotapTapCount = 0;$/;"	typedefs
tempotapTaps	midi.pde	/^int[] tempotapTaps = new int[4];$/;"	typedefs
text	settings.pde	/^  String text;$/;"	f	class:SettingsTab
thisFixtureIsLed	fixture.pde	/^  boolean thisFixtureIsLed() {$/;"	m	class:fixture
thisFixtureUseDim	Wash.pde	/^    boolean thisFixtureUseDim(int i) {$/;"	m	class:colorWash
thisFixtureUseDim	fixture.pde	/^  boolean thisFixtureUseDim() {$/;"	m	class:fixture
thisFixtureUseRgb	Wash.pde	/^    boolean thisFixtureUseRgb(int i) {$/;"	m	class:colorWash
thisFixtureUseRgb	fixture.pde	/^  boolean thisFixtureUseRgb() {$/;"	m	class:fixture
thisFixtureUseWhite	Wash.pde	/^    boolean thisFixtureUseWhite(int i) {$/;"	m	class:colorWash
thisFixtureUseWhite	fixture.pde	/^  boolean thisFixtureUseWhite() {$/;"	m	class:fixture
thisIsChase	memory.pde	/^  boolean thisIsChase() {$/;"	m	class:memory
title	GUI.pde	/^  String title;$/;"	f	class:contextMenuOption
toArray	functions.pde	/^int[] toArray(int a) {$/;"	m
toArray	functions.pde	/^int[] toArray(int a, int b) {$/;"	m
toArray	functions.pde	/^int[] toArray(int a, int b, int c) {$/;"	m
toArray	functions.pde	/^int[] toArray(int a, int b, int c, int d) {$/;"	m
toFixtureSize	profiles.pde	/^fixtureSize toFixtureSize(int w, int h) {$/;"	m
toFixtureSize	profiles.pde	/^fixtureSize toFixtureSize(int w, int h, boolean tdrwn) {$/;"	m
toTarget	cp5.pde	/^  void toTarget() {$/;"	m	class:ControlFrame
toggle	fixture.pde	/^  void toggle(boolean down) {$/;"	m	class:fixture
toggle	memory.pde	/^  void toggle(boolean down) {$/;"	m	class:memory
toggleWithMemory	memory.pde	/^  void toggleWithMemory(boolean down) {$/;"	m	class:memory
topMenuAccent	Umenu.pde	/^color topMenuAccent = color(150, 0, 0);$/;"	typedefs
topMenuTheme	Umenu.pde	/^color topMenuTheme = color(222, 0, 0);$/;"	typedefs
topMenuTheme2	Umenu.pde	/^color topMenuTheme2 = color(200, 0, 0);$/;"	typedefs
totalMillis	Draw.pde	/^long[] totalMillis = new long[9];$/;"	typedefs
touchOSCchannel	DMX_Controller.pde	/^int[] touchOSCchannel = new int[touchOSCchannels+1]; \/\/touchOSC kanavan arvo                               \/\/|||$/;"	typedefs
touchOSCchannelOld	DMX_Controller.pde	/^int[] touchOSCchannelOld = new int[touchOSCchannels+1]; \/\/touchOSC kanavan vanha arvo                      \/\/|||$/;"	typedefs
touchOSCchannels	DMX_Controller.pde	/^int touchOSCchannels = 72; \/\/touchOSC kanavien määrä                                                       \/\/|||$/;"	typedefs
touchOSCplace	DMX_Controller.pde	/^int touchOSCplace = 1; \/\/touchOSC ohjatut kanavat                                                          \/\/|||$/;"	typedefs
touchOscInComing	DMX_Controller.pde	/^int touchOscInComing = 8000;                                                                                                                                              \/\/|$/;"	typedefs
transitionSteps	cp5.pde	/^  int transitionSteps = 20;$/;"	f	class:ControlFrame
trigger	memory.pde	/^          boolean trigger() {$/;"	m	class:chase
triggerStepFromMaschine	midi.pde	/^void triggerStepFromMaschine(boolean onOrOff) {$/;"	m
trussToMove	functions.pde	/^int trussToMove = -1;$/;"	typedefs
tryDmxCheck	DMX_proc.pde	/^void tryDmxCheck() {$/;"	m
type	memory.pde	/^  int type; \/\/memorys type (preset, chase, master, fade etc) (TODO: expalanations for different memory type numbers here)$/;"	f	class:memory
typedPreset	cp5.pde	/^  String typedPreset = "";$/;"	f	class:ControlFrame
typingPreset	cp5.pde	/^  boolean typingPreset = false;$/;"	f	class:ControlFrame
universalDMXlength	profiles.pde	/^int universalDMXlength = 28+1;$/;"	typedefs
unknown	memory.pde	/^  void unknown() {$/;"	m	class:memory
up	memory.pde	/^  boolean up;$/;"	f	class:sine
updateElement	hover.pde	/^  boolean updateElement(String name, int x1, int y1, int x2, int y2) {$/;"	m	class:Mouse
updateMemories	Draw.pde	/^void updateMemories() {$/;"	m
useAll	Wash.pde	/^  void useAll() { useHalogens(); useLeds(); onlySelected = false; onlyList = false; disableByType = false; oddAndEven(); }$/;"	m	class:colorWash
useDisabledTypes	Wash.pde	/^  void useDisabledTypes() { disableByType = true; }$/;"	m	class:colorWash
useHalogens	Wash.pde	/^  boolean useHalogens = true;$/;"	f	class:colorWash
useHalogens	Wash.pde	/^  void useHalogens() { useHalogens = true; }$/;"	m	class:colorWash
useLeds	Wash.pde	/^  boolean useLeds = true;$/;"	f	class:colorWash
useLeds	Wash.pde	/^  void useLeds() { useLeds = true; }$/;"	m	class:colorWash
useOnlyList	Wash.pde	/^  void useOnlyList() { onlyList = true; }$/;"	m	class:colorWash
useOnlySelected	Wash.pde	/^  void useOnlySelected() { onlySelected = true; }$/;"	m	class:colorWash
useThisFixture	Wash.pde	/^    boolean useThisFixture(int i) {$/;"	m	class:colorWash
userId	DMX_Controller.pde	/^int userId = 3; \/\/Määritellään millä tietokoneella ohjelmaa käytetään 1 = Elias mac, 2 = Roope, 3 = Elias laptop - what pc are you using?                                 \/\/|$/;"	typedefs
userOneFrameRate	f3D.pde	/^int userOneFrameRate = 30;$/;"	typedefs
userTwoFrameRate	f3D.pde	/^int userTwoFrameRate = 30;$/;"	typedefs
val	memory.pde	/^  float val;$/;"	f	class:sine
valoScale	f3D.pde	/^int valoScale = 20;$/;"	f	class:secondApplet1
valoY	f3D.pde	/^int[] valoY = {100 + 70, 100 +140, 100 + 210, 100 + 280, 100 + 350, 100 + 420};$/;"	f	class:secondApplet1
vals	DMX_Controller.pde	/^int[] vals = new int[600];$/;"	typedefs
value	Lmenu.pde	/^  int value;$/;"	f	class:bottomMenuChController
value	memory.pde	/^  int value, valueOld; \/\/memorys value$/;"	f	class:memory
value	memory.pde	/^  int value;$/;"	f	class:chase
valueBeforeGo	Lmenu.pde	/^  int valueBeforeGo;$/;"	f	class:bottomMenuChController
valueBeforePush	memory.pde	/^  int valueBeforePush;$/;"	f	class:memory
valueChange	memory.pde	/^  int[] valueChange;$/;"	f	class:chase
valueHasChanged	fixtureDMX.pde	/^boolean valueHasChanged(int cur, int old) {$/;"	m
valueHasChanged	fixtureDMX.pde	/^boolean valueHasChanged(int i, int[] cur, int[] old) {$/;"	m
valueOfChannelBeforeSolo	DMX_Controller.pde	/^int[] valueOfChannelBeforeSolo = new int[1000];$/;"	typedefs
valueOfDimBeforeBlackout	DMX_Controller.pde	/^int[] valueOfDimBeforeBlackout = new int[1000];$/;"	typedefs
valueOfDimBeforeFullOn	inOSC.pde	/^int[] valueOfDimBeforeFullOn = new int[channels]; \/\/Muuttuja johon kirjoitetaan kanavien arvot ennen kun ne laitetaan täysille$/;"	typedefs
valueOfDimBeforeStrobe	inOSC.pde	/^int[] valueOfDimBeforeStrobe = new int[fixtures.size()];$/;"	typedefs
valueOfMemory	DMX_Controller.pde	/^int[] valueOfMemory = new int[1000];$/;"	typedefs
valueOfMemoryBeforeSolo	DMX_Controller.pde	/^int[] valueOfMemoryBeforeSolo = new int[1000];$/;"	typedefs
valueOld	memory.pde	/^  int value, valueOld; \/\/memorys value$/;"	f	class:memory
valueToDmx	DMX_Controller.pde	/^int[] valueToDmx = new int[512]; \/\/fixtuurien kirkkaus todellisuudessa (dmx output), sekä visualisaatiossa$/;"	typedefs
valueToDmxOld	functions.pde	/^int[] valueToDmxOld = new int[DMX_CHAN_LENGTH+1];$/;"	typedefs
var	settings.pde	/^  int var;$/;"	f	class:SettingController
w	GUI.pde	/^  int h, w;$/;"	f	class:SubWindowContainer
w	Lmenu.pde	/^  int w, h;$/;"	f	class:LowerMenu
w	Rmenu.pde	/^  int h = 600, w = 300;$/;"	f	class:MemoryCreationBox
w	cp5.pde	/^  int w, h;$/;"	f	class:ControlFrame
w	fixture.pde	/^  int w, h;$/;"	f	class:fixtureSize
w	settings.pde	/^  final int w = 500, h = 500;$/;"	f	class:SettingsWindow
wash	Wash.pde	/^colorWash wash;$/;"	typedefs
washs	Wash.pde	/^colorWash[] washs = new colorWash[40];$/;"	typedefs
waveCurrentStep	cp5.pde	/^  int waveCurrentStep = 1;$/;"	f	class:ControlFrame
waveData	cp5.pde	/^  int[] waveData = new int[12 + waveLength];$/;"	f	class:ControlFrame
waveLength	cp5.pde	/^  int waveLength = 3;$/;"	f	class:ControlFrame
waveLocation	cp5.pde	/^  boolean[] waveLocation = new boolean[12 + waveLength];$/;"	f	class:ControlFrame
waveStep	cp5.pde	/^  int waveStep = 2;$/;"	f	class:ControlFrame
whatToSave	input.pde	/^boolean[][] whatToSave = new boolean[numberOfMemories][saveOptionButtonVariables.length];$/;"	typedefs
whatToSave	memory.pde	/^  boolean[] whatToSave = new boolean[saveOptionButtonVariables.length+10];$/;"	f	class:memory
white	Wash.pde	/^  int red, green, blue, white, dim;$/;"	f	class:colorName
white	Wash.pde	/^  int red, green, blue, white, dim;$/;"	f	class:colorWash
white	Wash.pde	/^  int red, green, blue, white;$/;"	f	class:Color
width_	settings.pde	/^  int width_;$/;"	f	class:SettingsTab
window	GUI.pde	/^  java.lang.Object window;$/;"	f	class:SubWindowContainer
windowClass	GUI.pde	/^  Class windowClass;$/;"	f	class:SubWindowContainer
windowDraw	GUI.pde	/^  Method windowDraw;$/;"	f	class:SubWindowContainer
windowH	GUI.pde	/^  java.lang.reflect.Field windowH;$/;"	f	class:SubWindowContainer
windowLocX	GUI.pde	/^  java.lang.reflect.Field windowLocX;$/;"	f	class:SubWindowContainer
windowLocY	GUI.pde	/^  java.lang.reflect.Field windowLocY;$/;"	f	class:SubWindowContainer
windowOpen	GUI.pde	/^  java.lang.reflect.Field windowOpen;$/;"	f	class:SubWindowContainer
windowW	GUI.pde	/^  java.lang.reflect.Field windowW;$/;"	f	class:SubWindowContainer
x	GUI.pde	/^  int x, y; \/\/locations on screen$/;"	f	class:contextMenu
x	GUI.pde	/^  int x, y;$/;"	f	class:SubWindowContainer
x	Lmenu.pde	/^  int x, y;$/;"	f	class:bottomMenuChController
x	settings.pde	/^  int x, y;$/;"	f	class:IntSettingController
x	settings.pde	/^  int x, y;$/;"	f	class:StringSettingController
x1	hover.pde	/^  int x1, y1, x2, y2; \/\/Coordinates on screen$/;"	f	class:HoverableElement
x2	hover.pde	/^  int x1, y1, x2, y2; \/\/Coordinates on screen$/;"	f	class:HoverableElement
x_location	fixture.pde	/^  int x_location, y_location, z_location; \/\/location in visualisation$/;"	f	class:fixture
x_siirto	DMX_Controller.pde	/^float x_siirto = 0; \/\/Visualisaation sijainnin muutos vaakasuunnassa$/;"	typedefs
y	DMX_Controller.pde	/^int[] y = { 500, 200 };$/;"	typedefs
y	GUI.pde	/^  int x, y; \/\/locations on screen$/;"	f	class:contextMenu
y	GUI.pde	/^  int x, y;$/;"	f	class:SubWindowContainer
y	Lmenu.pde	/^  int x, y;$/;"	f	class:bottomMenuChController
y	settings.pde	/^  int x, y;$/;"	f	class:IntSettingController
y	settings.pde	/^  int x, y;$/;"	f	class:StringSettingController
y1	hover.pde	/^  int x1, y1, x2, y2; \/\/Coordinates on screen$/;"	f	class:HoverableElement
y2	hover.pde	/^  int x1, y1, x2, y2; \/\/Coordinates on screen$/;"	f	class:HoverableElement
y_location	fixture.pde	/^  int x_location, y_location, z_location; \/\/location in visualisation$/;"	f	class:fixture
y_siirto	DMX_Controller.pde	/^float y_siirto = 0; \/\/Visualisaation sijainnin muutos pystysuunnassa$/;"	typedefs
yellow	Wash.pde	/^  float cyan, magenta, yellow, black;$/;"	f	class:CMYK_Colour
ylavalikko	Umenu.pde	/^void ylavalikko() {$/;"	m
ylavalikkoSetup	Umenu.pde	/^void ylavalikkoSetup() {$/;"	m
z_location	fixture.pde	/^  int x_location, y_location, z_location; \/\/location in visualisation$/;"	f	class:fixture
zoom	DMX_Controller.pde	/^float zoom = 100; \/\/Visualisaation zoomauksen muutos$/;"	typedefs
